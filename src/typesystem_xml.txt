<typesystem package="com.trolltech.qt.xml" default-superclass="com.trolltech.qt.QtObject">
    <inject-code>
        com.trolltech.qt.Utilities.loadQtLibrary("QtXml");
    </inject-code>
    
    <enum-type name="QDomNode::NodeType" />
    <enum-type name="QDomImplementation::InvalidDataPolicy" />

    <value-type name="QDomAttr" />   
    <value-type name="QDomCDATASection" />
    <value-type name="QDomCharacterData" />
    <value-type name="QDomComment" />
    <value-type name="QDomDocument">

        <extra-includes>
            <include file-name="com.trolltech.qt.QNativePointer" location="java"/>
            <include file-name="com.trolltech.qt.QNativePointer.Type" location="java"/>
            <include file-name="com.trolltech.qt.core.QIODevice" location="java"/>
            <include file-name="com.trolltech.qt.core.QByteArray" location="java"/>
        </extra-includes>

        <inject-code>
    public class Result {
        private Result(boolean success, QNativePointer errorMessage, QNativePointer errorLine, QNativePointer errorColumn){
            this.success = success;
            this.errorMessage = errorMessage.stringValue();
            this.errorLine = errorLine.intValue();
            this.errorColumn = errorColumn.intValue();
        }

        private boolean success;
        private String errorMessage;
        private int errorLine;
        private int errorColumn;

        public boolean success(){
            return success;
        }

        public boolean failure(){
            return !success;
        }

        public String errorMessage(){
            return errorMessage;
        }

        public int errorLine(){
            return errorLine;
        }

        public int errorColumn(){
            return errorColumn;
        }
    }
        </inject-code>

        <!--bool setContent(QIODevice* dev, bool namespaceProcessing, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 ); -->
        <modify-function class="java" signature="setContent(QIODevice*, bool, QString*, int*, int*)">
            <access modifier="private" />
            <rename to="setContent_private" />
        </modify-function>
        <inject-code class="java">
    public Result setContent(QIODevice device, boolean namespaceProcessing){
        QNativePointer errorStr = new QNativePointer(Type.String);
        QNativePointer errorLine = new QNativePointer(Type.Int);
        QNativePointer errorColumn = new QNativePointer(Type.Int);
        return new Result(setContent_private(device, namespaceProcessing, errorStr, errorLine, errorColumn), errorStr, errorLine, errorColumn);
    }
        </inject-code>

        <!--bool setContent(const QByteArray& text, bool namespaceProcessing, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 ); -->
        <modify-function class="java" signature="setContent(QByteArray, bool, QString*, int*, int*)">
            <access modifier="private" />
            <rename to="setContent_private" />
        </modify-function>
        <inject-code class="java">
    public Result setContent(QByteArray text, boolean namespaceProcessing){
        QNativePointer errorStr = new QNativePointer(Type.String);
        QNativePointer errorLine = new QNativePointer(Type.Int);
        QNativePointer errorColumn = new QNativePointer(Type.Int);
        return new Result(setContent_private(text, namespaceProcessing, errorStr, errorLine, errorColumn), errorStr, errorLine, errorColumn);
    }
        </inject-code>

        <!--bool setContent(const QString& text, bool namespaceProcessing, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );-->
        <modify-function class="java" signature="setContent(QString, bool, QString*, int*, int*)">
            <access modifier="private" />
            <rename to="setContent_private" />
        </modify-function>
        <inject-code class="java">
    public Result setContent(String text, boolean namespaceProcessing){
        QNativePointer errorStr = new QNativePointer(Type.String);
        QNativePointer errorLine = new QNativePointer(Type.Int);
        QNativePointer errorColumn = new QNativePointer(Type.Int);
        return new Result(setContent_private(text, namespaceProcessing, errorStr, errorLine, errorColumn), errorStr, errorLine, errorColumn);
    }
        </inject-code>


    </value-type>
    <value-type name="QDomDocumentFragment" />
    <value-type name="QDomDocumentType" />
    <value-type name="QDomEntity" />
    <value-type name="QDomEntityReference" />
    <value-type name="QDomImplementation" />
    <value-type name="QDomNamedNodeMap" />
    <value-type name="QDomNode" />
    <value-type name="QDomNodeList" />
    <value-type name="QDomNotation" />
    <value-type name="QDomProcessingInstruction" />
    <value-type name="QDomText" />
    <value-type name="QXmlParseException" />
    
    <value-type name="QXmlAttributes">  
      <modify-function signature="index(const QLatin1String&amp;) const">
        <remove/>
      </modify-function>
      <modify-function signature="value(const QLatin1String&amp;) const">
        <remove/>
      </modify-function>
    </value-type>

    <value-type name="QXmlNamespaceSupport">
        <custom-constructor>
            QXmlNamespaceSupport *clone = new QXmlNamespaceSupport;
            clone->setPrefix("", copy->uri(""));
            
            QStringList prefixes = copy->prefixes();
            for (int i=0; i&lt;prefixes.size(); ++i) 
                clone->setPrefix(prefixes.at(i), copy->uri(prefixes.at(i)));
                
            return clone;
        </custom-constructor>
        <custom-destructor>
            delete (QXmlNamespaceSupport *)copy;
        </custom-destructor>           
    </value-type>

    <value-type name="QDomElement">
        <modify-function class="native" signature="attributeNS(const QString, const QString &amp;, const QString &amp;) const">
            <modify-argument index="1">
                <conversion-rule>
                    QString %out = qtjambi_to_qstring(__jni_env, (jstring) %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function class="native" signature="setAttributeNS(const QString, const QString &amp;, const QString &amp;)">
            <modify-argument index="1">
                <conversion-rule>
                    QString %out = qtjambi_to_qstring(__jni_env, (jstring) %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function class="native" signature="setAttributeNS(const QString, const QString &amp;, int)">
            <modify-argument index="1">
                <conversion-rule>
                    QString %out = qtjambi_to_qstring(__jni_env, (jstring) %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function class="native" signature="setAttributeNS(const QString, const QString &amp;, uint)">
            <modify-argument index="1">
                <conversion-rule>
                    QString %out = qtjambi_to_qstring(__jni_env, (jstring) %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>                        
        <modify-function class="native" signature="setAttributeNS(const QString, const QString &amp;, long long)">
            <modify-argument index="1">
                <conversion-rule>
                    QString %out = qtjambi_to_qstring(__jni_env, (jstring) %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>        
        <modify-function class="native" signature="setAttributeNS(const QString, const QString &amp;, unsigned long long)">
            <modify-argument index="1">
                <conversion-rule>
                    QString %out = qtjambi_to_qstring(__jni_env, (jstring) %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>        
        <modify-function class="native" signature="setAttributeNS(const QString, const QString &amp;, double)">
            <modify-argument index="1">
                <conversion-rule>
                    QString %out = qtjambi_to_qstring(__jni_env, (jstring) %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>        
        <modify-function signature="setAttribute(const QString &amp;, unsigned int)">
            <remove />
        </modify-function>
        <modify-function signature="setAttribute(const QString &amp;, unsigned long long)">
            <remove />
        </modify-function>        
        <modify-function signature="setAttributeNS(const QString, const QString &amp;, unsigned int)">
            <remove />
        </modify-function>
        <modify-function signature="setAttributeNS(const QString, const QString &amp;, unsigned long long)">
            <remove />
        </modify-function>        
        
    </value-type>
    
    <interface-type name="QXmlContentHandler" />
    <interface-type name="QXmlDTDHandler" />
    <interface-type name="QXmlDeclHandler" />
    <interface-type name="QXmlEntityResolver" />
    <interface-type name="QXmlErrorHandler" />
    <interface-type name="QXmlLexicalHandler" />
    
    <object-type name="QXmlDefaultHandler" />
    <object-type name="QXmlInputSource" />
    <object-type name="QXmlLocator" />        
    <object-type name="QXmlSimpleReader" />
    
    <object-type name="QXmlReader">
        <modify-function class="java" signature="parse(const QXmlInputSource &amp;)">
            <remove exclusive="yes" />
        </modify-function>
    </object-type>
</typesystem>