<typesystem package="com.trolltech.qt.network" default-superclass="com.trolltech.qt.QtJambiObject">
  <inject-code>
    com.trolltech.qt.Utilities.loadQtLibrary("QtNetwork");
  </inject-code>
  
  <enum-type name="QAbstractSocket::NetworkLayerProtocol" />
  <enum-type name="QAbstractSocket::SocketError" />
  <enum-type name="QAbstractSocket::SocketState" />
  <enum-type name="QAbstractSocket::SocketType" />
  <enum-type name="QFtp::Command" />
  <enum-type name="QFtp::Error" />
  <enum-type name="QFtp::State" />
  <enum-type name="QFtp::TransferMode" />
  <enum-type name="QFtp::TransferType" />
  <enum-type name="QHostAddress::SpecialAddress" />
  <enum-type name="QHttp::Error" />
  <enum-type name="QHttp::State" />
  <enum-type name="QHttp::ConnectionMode" />
  <enum-type name="QNetworkInterface::InterfaceFlag" flags="QNetworkInterface::InterfaceFlags" />
  <enum-type name="QNetworkProxy::ProxyType" />
  <enum-type name="QUdpSocket::BindFlag" flags="QUdpSocket::BindMode" />
  <enum-type name="QUrlInfo::PermissionSpec" />
  <enum-type name="QHostInfo::HostInfoError" />    
      
  <template name="network.read_char*_long_long">
        public final int read(byte data[]) {
            if (data.length == 0) return 0;
            
            com.trolltech.qt.QNativePointer np = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Byte, data.length);
            int len = (int) read(np, data.length);
            for (int i=0; i&lt;len; ++i) data[i] = np.byteAt(i);
            
            return len;
        }      
  </template>
   
  <object-type name="QAbstractSocket" />
  <object-type name="QFtp">
    <modify-function signature="read(char*,long long)">
        <access modifier="private" />
    </modify-function>
    <inject-code>
        <insert-template name="network.read_char*_long_long" />
    </inject-code>
  </object-type>
  <object-type name="QHttp">
    <modify-function signature="read(char*,long long)">
        <access modifier="private" />
    </modify-function>  
    <inject-code>
        <insert-template name="network.read_char*_long_long" />
    </inject-code>  
  </object-type>
  <object-type name="QTcpServer">
    <extra-includes>
        <include file-name="com.trolltech.qt.QNativePointer" location="java" />
    </extra-includes>
    <modify-function signature="listen(QHostAddress,unsigned short)">
        <modify-argument index="1">
            <replace-default-expression with="new com.trolltech.qt.network.QHostAddress(com.trolltech.qt.network.QHostAddress.SpecialAddress.Any)" />
        </modify-argument>
    </modify-function>
    <modify-function signature="waitForNewConnection(int,bool*)">
        <access modifier="private" />
        <modify-argument index="1">
            <remove-default-expression />
        </modify-argument>
        <modify-argument index="2">
            <remove-default-expression />
        </modify-argument>        
    </modify-function>
    <inject-code>
        public enum Result {
            Success,
            Failure,
            TimedOut
        }
        public final Result waitForNewConnection(int msec) {
            QNativePointer np = new QNativePointer(QNativePointer.Type.Boolean);
            boolean success = waitForNewConnection(msec, np);
            
            return (np.booleanValue() 
                      ? Result.TimedOut
                      : (success ? Result.Success : Result.Failure));                        
        }
        
        public final Result waitForNewConnection() {
            return waitForNewConnection(0);
        }
    </inject-code>    
  </object-type>
  
  <object-type name="QTcpSocket" />
  <object-type name="QUdpSocket">  
    <extra-includes>
        <include file-name="com.trolltech.qt.QNativePointer" location="java" />
    </extra-includes>        
    <modify-function signature="readDatagram(char*,long long,QHostAddress*,unsigned short*)">
        <access modifier="private" />
    </modify-function>
    <inject-code>
        public static class HostInfo {
            public HostInfo() {
                address = new QHostAddress();
                port = 0;
            }
            public QHostAddress address;
            public char port;
        }
        public final int readDatagram(byte data[], HostInfo info) {
            QNativePointer np = new QNativePointer(QNativePointer.Type.Byte, data.length);
            QNativePointer address = info != null &amp;&amp; info.address != null ? info.address.nativePointer() : null;
            QNativePointer port = new QNativePointer(QNativePointer.Type.Char);
            
            int len = (int) readDatagram(np, data.length, address, port);
            if (info != null) info.port = port.charValue();       
            for (int i=0; i&lt;len; ++i) data[i] = np.byteAt(i);
            
            return len;
        }
    </inject-code>
    
    <modify-function signature="writeDatagram(const char*,long long,QHostAddress,unsigned short)">
        <access modifier="private" />
    </modify-function>
    <inject-code>
        public int writeDatagram(byte data[], QHostAddress address, char port) {
            QNativePointer np = com.trolltech.qt.QtJambiInternal.byteArrayToNativePointer(data);
            return (int) writeDatagram(np, data.length, address, port);
        }
    </inject-code>
  </object-type>
  <object-type name="QHttpHeader" />

  <value-type name="QHostAddress">
    <modify-function signature="QHostAddress(unsigned char*)" remove="all"/>
    <modify-function signature="setAddress(unsigned char*)" remove="all"/>
    <modify-function signature="operator=(QHttpHeader)" remove="all"/>
    <modify-function signature="operator=(QString)" remove="all"/>
    <modify-function signature="operator=(QHostAddress)" remove="all"/>
  </value-type>  

  <value-type name="QHostInfo">
        <modify-function signature="operator=(QHostInfo)" remove="all"/>
        <modify-function signature="lookupHost(QString,QObject*,const char*)" remove="all"/>
  </value-type>

  <value-type name="QHttpRequestHeader">
    <modify-function signature="operator=(QHttpRequestHeader)" remove="all"/>
  </value-type>

  <value-type name="QHttpResponseHeader">
    <modify-function signature="operator=(QHttpResponseHeader)" remove="all"/>
  </value-type>

  <value-type name="QNetworkAddressEntry">
    <modify-function signature="operator=(QNetworkAddressEntry)" remove="all"/>
  </value-type>
  
  <value-type name="QNetworkInterface">
    <modify-function signature="operator=(QNetworkInterface)" remove="all"/>
  </value-type>
  
  <value-type name="QNetworkProxy">
    <modify-function signature="operator=(QNetworkProxy)" remove="all"/>
  </value-type>

  <value-type name="QUrlInfo">
    <modify-function signature="operator=(QUrlInfo)" remove="all"/>
  </value-type>

  <value-type name="QIPv6Address">
    <modify-function signature="operator[](int)const">
        <remove/>
    </modify-function>
    <modify-function signature="operator[](int)">
        <remove/>
    </modify-function>    
  </value-type>
  
  <value-type name="QAuthenticator">
    <modify-function signature="operator=(QAuthenticator)" remove="all"/>
  </value-type>
  
  <suppress-warning text="*unmatched parameter type 'sockaddr const*" />
  
</typesystem>