<typesystem package="com.trolltech.qt.gui" default-superclass="com.trolltech.qt.QtObject">
  <inject-code>
    com.trolltech.qt.Utilities.loadQtLibrary("QtGui");
  </inject-code>

  <rejection class="*" function-name="d_func"/>

  <rejection class="*" field-name="d_ptr"/>
  <rejection class="*" field-name="d"/>

  <rejection class="QAbstractUndoItem"/>    
  <rejection class="QAccessibleApplication"/>
  <rejection class="QAccessibleBridgeFactoryInterface"/>
  <rejection class="QAccessibleBridgePlugin"/>
  <rejection class="QAccessibleFactoryInterface"/>
  <rejection class="QAccessiblePlugin"/>
  <rejection class="QBrushData"/>
  <rejection class="QIconEngineFactoryInterface"/>
  <rejection class="QIconEnginePlugin"/>
  <rejection class="QImageIOHandlerFactoryInterface"/>
  <rejection class="QImageIOPlugin"/>
  <rejection class="QImageTextKeyLang"/>
  <rejection class="QInputContextFactoryInterface"/>
  <rejection class="QInputContextPlugin"/>
  <rejection class="QItemEditorCreator"/>
  <rejection class="QLibrary"/>
  <rejection class="QLinkedList"/>
  <rejection class="QLinkedListData"/>
  <rejection class="QLinkedListIterator"/>
  <rejection class="QLinkedListNode"/>
  <rejection class="QMimeSource"/>
  <rejection class="QPainterPathPrivate"/>
  <rejection class="QPictureFormatInterface"/>
  <rejection class="QPictureFormatPlugin"/>
  <rejection class="QRegionData"/>
  <rejection class="QStandardItemEditorCreator"/>
  <rejection class="QStyleFactoryInterface"/>
  <rejection class="QStyleOptionQ3DockWindow"/>
  <rejection class="QStyleOptionQ3ListView"/>
  <rejection class="QStyleOptionQ3ListViewItem"/>
  <rejection class="QStylePlugin"/>
  <rejection class="QTextCodecFactoryInterface"/>
  <rejection class="QTextCodecPlugin"/>
  <rejection class="QTextFrameLayoutData"/>
  <rejection class="QUpdateLaterEvent"/>
  <rejection class="QVFbHeader"/>
  <rejection class="QWidgetData"/>
  <rejection class="QWindowSurface"/>
  <rejection class="QWindowsXPStyle"/>

  <rejection class="QAbstractItemDelegate" function-name="operator="/>
  <rejection class="QAccessible" function-name="installFactory"/>
  <rejection class="QAccessible" function-name="installRootObjectHandler"/>
  <rejection class="QAccessible" function-name="installUpdateHandler"/>
  <rejection class="QAccessible" function-name="removeFactory"/>
  <rejection class="QApplication" function-name="compressEvent"/>
  <rejection class="QBrush" function-name="cleanUp"/>
  <rejection class="QPictureIO" function-name="defineIOHandler"/>
  <rejection class="QPolygon" function-name="putPoints"/>
  <rejection class="QPolygon" function-name="setPoints"/>
  <rejection class="QPolygon" function-name="setPoint"/>
  <rejection class="QPolygon" function-name="points"/>
  <rejection class="QPolygon" function-name="point"/>
  <rejection class="QPrinter" function-name="printerSelectionOption"/>
  <rejection class="QPrinter" function-name="setPrinterSelectionOption"/>
  <rejection class="QWidget" function-name="create"/>
  <rejection class="QWidget" function-name="find"/>
  <rejection class="QWidget" function-name="handle"/>
  <rejection class="QWidget" function-name="styleChange"/>
  <rejection class="QWidget" function-name="winId"/>
  <rejection class="QActionGroup" function-name="selected"/> 
  <rejection class="QPaintEngine" function-name="fix_neg_rect"/>           

  <enum-type name="QAbstractItemDelegate::EndEditHint"/>
  <enum-type name="QAbstractItemView::CursorAction"/>
  <enum-type name="QAbstractItemView::DragDropMode"/>
  <enum-type name="QAbstractItemView::DropIndicatorPosition"/>
  <enum-type name="QAbstractItemView::EditTrigger" flags="QAbstractItemView::EditTriggers"/>
  <enum-type name="QAbstractItemView::ScrollHint"/>
  <enum-type name="QAbstractItemView::ScrollMode"/>
  <enum-type name="QAbstractItemView::SelectionBehavior"/>
  <enum-type name="QAbstractItemView::SelectionMode"/>
  <enum-type name="QAbstractItemView::State"/>
  <enum-type name="QAbstractPrintDialog::PrintDialogOption" flags="QAbstractPrintDialog::PrintDialogOptions"/>
  <enum-type name="QAbstractPrintDialog::PrintRange"/>
  <enum-type name="QAbstractSlider::SliderAction"/>
  <enum-type name="QAbstractSlider::SliderChange"/>
  <enum-type name="QAbstractSpinBox::ButtonSymbols"/>
  <enum-type name="QAbstractSpinBox::CorrectionMode"/>
  <enum-type name="QAbstractSpinBox::StepEnabledFlag" flags="QAbstractSpinBox::StepEnabled"/>
  <enum-type name="QAccessible::Event"/>
  <enum-type name="QAccessible::Method"/>
  <enum-type name="QAccessible::RelationFlag" flags="QAccessible::Relation"/>
  <enum-type name="QAccessible::Role"/>
  <enum-type name="QAccessible::StateFlag" flags="QAccessible::State"/>
  <enum-type name="QAccessible::Text"/>
  <enum-type name="QAction::ActionEvent"/>
  <enum-type name="QAction::MenuRole"/>
  <enum-type name="QApplication::ColorSpec"/>
  <enum-type name="QApplication::Type"/>
  <enum-type name="QCalendarWidget::HorizontalHeaderFormat"/>
  <enum-type name="QCalendarWidget::SelectionMode"/>
  <enum-type name="QCalendarWidget::VerticalHeaderFormat"/>
  <enum-type name="QColor::Spec"/>
  <enum-type name="QColormap::Mode"/>
  <enum-type name="QComboBox::InsertPolicy"/>
  <enum-type name="QComboBox::SizeAdjustPolicy"/>
  <enum-type name="QCompleter::CompletionMode"/>
  <enum-type name="QCompleter::ModelSorting"/>
  <enum-type name="QContextMenuEvent::Reason"/>
  <enum-type name="QDataWidgetMapper::SubmitPolicy"/>
  <enum-type name="QDateTimeEdit::Section" flags="QDateTimeEdit::Sections"/>
  <enum-type name="QDialog::DialogCode"/>
  <enum-type name="QDialogButtonBox::ButtonLayout"/>
  <enum-type name="QDialogButtonBox::ButtonRole"/>
  <enum-type name="QFileDialog::AcceptMode"/>
  <enum-type name="QFileDialog::DialogLabel"/>
  <enum-type name="QFileDialog::FileMode"/>
  <enum-type name="QFileDialog::Option" flags="QFileDialog::Options"/>
  <enum-type name="QFileDialog::ViewMode"/>
  <enum-type name="QFileIconProvider::IconType"/>
  <enum-type name="QFont::FontWeight"/>
  <enum-type name="QFont::Stretch"/>
  <enum-type name="QFont::Style"/>
  <enum-type name="QFont::StyleStrategy"/>
  <enum-type name="QFont::Weight"/>
  <enum-type name="QFontComboBox::FontFilter" flags="QFontComboBox::FontFilters"/>
  <enum-type name="QFrame::FrameFlags"/>
  <enum-type name="QFrame::Shadow"/>
  <enum-type name="QFrame::Shape"/>
  <enum-type name="QFrame::StyleMask"/>
  <enum-type name="QFrame::enum_1"/>
  <enum-type name="QGradient::CoordinateMode"/>
  <enum-type name="QGradient::Spread" lower-bound="QGradient.PadSpread" upper-bound="QGradient.RepeatSpread"/>
  <enum-type name="QGradient::Type"/>
  <enum-type name="QGraphicsEllipseItem::enum_1"/>
  <enum-type name="QGraphicsItem::Extension"/>
  <enum-type name="QGraphicsItem::GraphicsItemChange"/>
  <enum-type name="QGraphicsItem::GraphicsItemFlag" flags="QGraphicsItem::GraphicsItemFlags"/>
  <enum-type name="QGraphicsItem::enum_1"/>
  <enum-type name="QGraphicsItemGroup::enum_1"/>
  <enum-type name="QGraphicsLineItem::enum_1"/>
  <enum-type name="QGraphicsPathItem::enum_1"/>
  <enum-type name="QGraphicsPixmapItem::ShapeMode"/>
  <enum-type name="QGraphicsPixmapItem::enum_1"/>
  <enum-type name="QGraphicsPolygonItem::enum_1"/>
  <enum-type name="QGraphicsRectItem::enum_1"/>
  <enum-type name="QGraphicsScene::ItemIndexMethod"/>
  <enum-type name="QGraphicsSceneContextMenuEvent::Reason"/>
  <enum-type name="QGraphicsSimpleTextItem::enum_1"/>
  <enum-type name="QGraphicsTextItem::enum_1"/>
  <enum-type name="QGraphicsView::CacheModeFlag" flags="QGraphicsView::CacheMode"/>
  <enum-type name="QGraphicsView::DragMode"/>
  <enum-type name="QGraphicsView::ViewportAnchor"/>
  <enum-type name="QIcon::Mode"/>
  <enum-type name="QIcon::State"/>
  <enum-type name="QImage::Format"/>
  <enum-type name="QImage::InvertMode"/>
  <enum-type name="QImageIOHandler::ImageOption"/>
  <enum-type name="QImageIOPlugin::Capability" flags="QImageIOPlugin::Capabilitys"/>
  <enum-type name="QImageReader::ImageReaderError"/>
  <enum-type name="QImageWriter::ImageWriterError"/>
  <enum-type name="QInputContext::StandardFormat"/>
  <enum-type name="QInputMethodEvent::AttributeType"/>
  <enum-type name="QItemSelectionModel::SelectionFlag" flags="QItemSelectionModel::SelectionFlags"/>
  <enum-type name="QKeySequence::SequenceFormat"/>
  <enum-type name="QKeySequence::SequenceMatch"/>
  <enum-type name="QKeySequence::StandardKey"/>
  <enum-type name="QLCDNumber::Mode"/>
  <enum-type name="QLCDNumber::SegmentStyle"/>
  <enum-type name="QLayout::SizeConstraint"/>
  <enum-type name="QLineEdit::EchoMode"/>
  <enum-type name="QLineF::IntersectType"/>
  <enum-type name="QListView::Flow"/>
  <enum-type name="QListView::LayoutMode"/>
  <enum-type name="QListView::Movement"/>
  <enum-type name="QListView::ResizeMode"/>
  <enum-type name="QListView::ViewMode"/>
  <enum-type name="QListWidgetItem::ItemType"/>
  <enum-type name="QListWidgetItem::enum_1"/>
  <enum-type name="QMessageBox::Button"/>
  <enum-type name="QMessageBox::ButtonRole"/>
  <enum-type name="QMessageBox::Icon"/>
  <enum-type name="QMovie::CacheMode"/>
  <enum-type name="QMovie::MovieState"/>
  <enum-type name="QPaintDevice::PaintDeviceMetric"/>
  <enum-type name="QPaintEngine::DirtyFlag" flags="QPaintEngine::DirtyFlags"/>
  <enum-type name="QPaintEngine::PaintEngineFeature" flags="QPaintEngine::PaintEngineFeatures"/>
  <enum-type name="QPaintEngine::PolygonDrawMode"/>
  <enum-type name="QPaintEngine::Type"/>
  <enum-type name="QPainter::CompositionMode"/>
  <enum-type name="QPainter::RenderHint" flags="QPainter::RenderHints"/>
  <enum-type name="QPainterPath::ElementType"/>
  <enum-type name="QPrintEngine::PrintEnginePropertyKey"/>
  <enum-type name="QPrinter::ColorMode"/>
  <enum-type name="QPrinter::Orientation"/>
  <enum-type name="QPrinter::OutputFormat"/>
  <enum-type name="QPrinter::PageOrder"/>
  <enum-type name="QPrinter::PaperSource"/>
  <enum-type name="QPrinter::PrintRange"/>
  <enum-type name="QPrinter::PrinterMode"/>
  <enum-type name="QPrinter::PrinterState"/>
  <enum-type name="QProgressBar::Direction"/>
  <enum-type name="QRegion::RegionType"/>
  <enum-type name="QRubberBand::Shape"/>
  <enum-type name="QSessionManager::RestartHint"/>
  <enum-type name="QSizePolicy::Policy"/>
  <enum-type name="QSizePolicy::PolicyFlag"/>
  <enum-type name="QSizePolicy::SizePolicyMasks"/>
  <enum-type name="QStandardItem::ItemType"/>
  <enum-type name="QStyle::SubControl" flags="QStyle::SubControls" extensible="yes" force-integer="yes"/>
  <enum-type name="QStyle::ComplexControl" extensible="yes"/>
  <enum-type name="QStyle::ContentsType" extensible="yes"/>
  <enum-type name="QStyle::ControlElement" extensible="yes"/>
  <enum-type name="QStyle::PixelMetric" extensible="yes"/>
  <enum-type name="QStyle::PrimitiveElement" extensible="yes"/>
  <enum-type name="QStyle::StandardPixmap" extensible="yes"/>
  <enum-type name="QStyle::StateFlag" flags="QStyle::State"/>
  <enum-type name="QStyle::SubElement" extensible="yes"/>
  <enum-type name="QStyleHintReturn::HintReturnType"/>
  <enum-type name="QStyleHintReturn::StyleOptionType"/>
  <enum-type name="QStyleHintReturn::StyleOptionVersion"/>
  <enum-type name="QStyleHintReturn::enum_1"/>
  <enum-type name="QStyleHintReturn::enum_2"/>
  <enum-type name="QStyleHintReturnMask::StyleOptionType"/>
  <enum-type name="QStyleHintReturnMask::StyleOptionVersion"/>
  <enum-type name="QStyleHintReturnMask::enum_1"/>
  <enum-type name="QStyleHintReturnMask::enum_2"/>
  <enum-type name="QStyleOption::StyleOptionType" />
  <enum-type name="QStyleOption::OptionType" extensible="yes"/>
  <enum-type name="QStyleOption::StyleOptionVersion"/>
  <enum-type name="QStyleOption::enum_2"/>
  <enum-type name="QStyleOptionButton::ButtonFeature" flags="QStyleOptionButton::ButtonFeatures"/>
  <enum-type name="QStyleOptionButton::StyleOptionType"/>
  <enum-type name="QStyleOptionButton::StyleOptionVersion"/>
  <enum-type name="QStyleOptionButton::enum_1"/>
  <enum-type name="QStyleOptionButton::enum_2"/>
  <enum-type name="QStyleOptionComboBox::StyleOptionType"/>
  <enum-type name="QStyleOptionComboBox::StyleOptionVersion"/>
  <enum-type name="QStyleOptionComboBox::enum_1"/>
  <enum-type name="QStyleOptionComboBox::enum_2"/>
  <enum-type name="QStyleOptionComplex::StyleOptionType"/>
  <enum-type name="QStyleOptionComplex::StyleOptionVersion"/>
  <enum-type name="QStyleOptionComplex::enum_1"/>
  <enum-type name="QStyleOptionComplex::enum_2"/>
  <enum-type name="QStyleOptionDockWidget::StyleOptionType"/>
  <enum-type name="QStyleOptionDockWidget::StyleOptionVersion"/>
  <enum-type name="QStyleOptionDockWidget::enum_1"/>
  <enum-type name="QStyleOptionDockWidget::enum_2"/>
  <enum-type name="QStyleOptionFocusRect::StyleOptionType"/>
  <enum-type name="QStyleOptionFocusRect::StyleOptionVersion"/>
  <enum-type name="QStyleOptionFocusRect::enum_1"/>
  <enum-type name="QStyleOptionFocusRect::enum_2"/>
  <enum-type name="QStyleOptionFrame::StyleOptionType"/>
  <enum-type name="QStyleOptionFrame::StyleOptionVersion"/>
 <enum-type name="QStyleOptionFrame::enum_1"/>
  <enum-type name="QStyleOptionFrame::enum_2"/>
  <enum-type name="QStyleOptionFrameV2::FrameFeature" flags="QStyleOptionFrameV2::FrameFeatures"/>
  <enum-type name="QStyleOptionFrameV2::StyleOptionVersion"/>
  <enum-type name="QStyleOptionFrameV2::enum_1"/>
  <enum-type name="QStyleOptionGraphicsItem::StyleOptionType"/>
  <enum-type name="QStyleOptionGraphicsItem::StyleOptionVersion"/>
  <enum-type name="QStyleOptionGroupBox::StyleOptionType"/>
  <enum-type name="QStyleOptionGroupBox::StyleOptionVersion"/>
  <enum-type name="QStyleOptionGroupBox::enum_1"/>
  <enum-type name="QStyleOptionGroupBox::enum_2"/>
  <enum-type name="QStyleOptionHeader::SectionPosition"/>
  <enum-type name="QStyleOptionHeader::SelectedPosition"/>
  <enum-type name="QStyleOptionHeader::SortIndicator"/>
  <enum-type name="QStyleOptionHeader::StyleOptionType"/>
  <enum-type name="QStyleOptionHeader::StyleOptionVersion"/>
  <enum-type name="QStyleOptionHeader::enum_1"/>
  <enum-type name="QStyleOptionHeader::enum_2"/>
  <enum-type name="QStyleOptionMenuItem::CheckType"/>
  <enum-type name="QStyleOptionMenuItem::MenuItemType"/>
  <enum-type name="QStyleOptionMenuItem::StyleOptionType"/>
  <enum-type name="QStyleOptionMenuItem::StyleOptionVersion"/>
  <enum-type name="QStyleOptionMenuItem::enum_1"/>
  <enum-type name="QStyleOptionMenuItem::enum_2"/>
  <enum-type name="QStyleOptionProgressBar::StyleOptionType"/>
  <enum-type name="QStyleOptionProgressBar::StyleOptionVersion"/>
  <enum-type name="QStyleOptionProgressBar::enum_1"/>
  <enum-type name="QStyleOptionProgressBar::enum_2"/>
  <enum-type name="QStyleOptionProgressBarV2::StyleOptionType"/>
  <enum-type name="QStyleOptionProgressBarV2::StyleOptionVersion"/>
  <enum-type name="QStyleOptionProgressBarV2::enum_1"/>
  <enum-type name="QStyleOptionProgressBarV2::enum_2"/>
  <enum-type name="QStyleOptionQ3ListViewItem::Q3ListViewItemFeature"/>
  <enum-type name="QStyleOptionRubberBand::StyleOptionType"/>
  <enum-type name="QStyleOptionRubberBand::StyleOptionVersion"/>
  <enum-type name="QStyleOptionRubberBand::enum_1"/>
  <enum-type name="QStyleOptionRubberBand::enum_2"/>
  <enum-type name="QStyleOptionSizeGrip::StyleOptionType"/>
  <enum-type name="QStyleOptionSizeGrip::StyleOptionVersion"/>
  <enum-type name="QStyleOptionSlider::StyleOptionType"/>
  <enum-type name="QStyleOptionSlider::StyleOptionVersion"/>
  <enum-type name="QStyleOptionSlider::enum_1"/>
  <enum-type name="QStyleOptionSlider::enum_2"/>
  <enum-type name="QStyleOptionSpinBox::StyleOptionType"/>
  <enum-type name="QStyleOptionSpinBox::StyleOptionVersion"/>
  <enum-type name="QStyleOptionSpinBox::enum_1"/>
  <enum-type name="QStyleOptionSpinBox::enum_2"/>
  <enum-type name="QStyleOptionTab::CornerWidget" flags="QStyleOptionTab::CornerWidgets"/>
  <enum-type name="QStyleOptionTab::SelectedPosition"/>
  <enum-type name="QStyleOptionTab::StyleOptionType"/>
  <enum-type name="QStyleOptionTab::StyleOptionVersion"/>
  <enum-type name="QStyleOptionTab::TabPosition"/>
  <enum-type name="QStyleOptionTab::enum_1"/>
  <enum-type name="QStyleOptionTab::enum_2"/>
  <enum-type name="QStyleOptionTabBarBase::StyleOptionType"/>
  <enum-type name="QStyleOptionTabBarBase::StyleOptionVersion"/>
  <enum-type name="QStyleOptionTabBarBase::enum_1"/>
  <enum-type name="QStyleOptionTabBarBase::enum_2"/>
  <enum-type name="QStyleOptionTabV2::StyleOptionVersion"/>
  <enum-type name="QStyleOptionTabV2::enum_1"/>
  <enum-type name="QStyleOptionTabWidgetFrame::StyleOptionType"/>
  <enum-type name="QStyleOptionTabWidgetFrame::StyleOptionVersion"/>
  <enum-type name="QStyleOptionTabWidgetFrame::enum_1"/>
  <enum-type name="QStyleOptionTabWidgetFrame::enum_2"/>
  <enum-type name="QStyleOptionTitleBar::StyleOptionType"/>
  <enum-type name="QStyleOptionTitleBar::StyleOptionVersion"/>
  <enum-type name="QStyleOptionTitleBar::enum_1"/>
  <enum-type name="QStyleOptionTitleBar::enum_2"/>
  <enum-type name="QStyleOptionToolBar::StyleOptionType"/>
  <enum-type name="QStyleOptionToolBar::StyleOptionVersion"/>
  <enum-type name="QStyleOptionToolBar::ToolBarFeature" flags="QStyleOptionToolBar::ToolBarFeatures"/>
  <enum-type name="QStyleOptionToolBar::ToolBarPosition"/>
  <enum-type name="QStyleOptionToolBar::enum_1"/>
  <enum-type name="QStyleOptionToolBar::enum_2"/>
  <enum-type name="QStyleOptionToolBox::StyleOptionType"/>
  <enum-type name="QStyleOptionToolBox::StyleOptionVersion"/>
  <enum-type name="QStyleOptionToolBox::enum_1"/>
  <enum-type name="QStyleOptionToolBox::enum_2"/>
  <enum-type name="QStyleOptionToolButton::StyleOptionType"/>
  <enum-type name="QStyleOptionToolButton::StyleOptionVersion"/>
  <enum-type name="QStyleOptionToolButton::ToolButtonFeature" flags="QStyleOptionToolButton::ToolButtonFeatures"/>
  <enum-type name="QStyleOptionToolButton::enum_1"/>
  <enum-type name="QStyleOptionToolButton::enum_2"/>
  <enum-type name="QStyleOptionViewItem::Position"/>
  <enum-type name="QStyleOptionViewItem::StyleOptionType"/>
  <enum-type name="QStyleOptionViewItem::StyleOptionVersion"/>
  <enum-type name="QStyleOptionViewItem::enum_1"/>
  <enum-type name="QStyleOptionViewItem::enum_2"/>
  <enum-type name="QStyleOptionViewItemV2::StyleOptionVersion"/>
  <enum-type name="QStyleOptionViewItemV2::ViewItemFeature" flags="QStyleOptionViewItemV2::ViewItemFeatures" />
  <enum-type name="QSystemTrayIcon::ActivationReason"/>
  <enum-type name="QSystemTrayIcon::MessageIcon"/>
  <enum-type name="QTabBar::Shape"/>
  <enum-type name="QTabWidget::TabPosition"/>
  <enum-type name="QTabWidget::TabShape"/>
  <enum-type name="QTableWidgetItem::ItemType"/>
  <enum-type name="QTableWidgetItem::enum_1"/>
  <enum-type name="QTabletEvent::PointerType"/>
  <enum-type name="QTabletEvent::TabletDevice"/>
  <enum-type name="QTextCharFormat::UnderlineStyle"/>
  <enum-type name="QTextCharFormat::VerticalAlignment"/>
  <enum-type name="QTextCursor::MoveMode"/>
  <enum-type name="QTextCursor::MoveOperation"/>
  <enum-type name="QTextCursor::SelectionType"/>
  <enum-type name="QTextDocument::FindFlag" flags="QTextDocument::FindFlags"/>
  <enum-type name="QTextDocument::MetaInformation"/>
  <enum-type name="QTextDocument::ResourceType"/>
  <enum-type name="QTextEdit::AutoFormattingFlag" flags="QTextEdit::AutoFormatting"/>
  <enum-type name="QTextEdit::CursorAction"/>
  <enum-type name="QTextEdit::LineWrapMode"/>
  <enum-type name="QTextFormat::ObjectTypes"/>
  <enum-type name="QTextFormat::PageBreakFlag" flags="QTextFormat::PageBreakFlags"/>
  <enum-type name="QTextFrameFormat::Position"/>
  <enum-type name="QTextItem::RenderFlag" flags="QTextItem::RenderFlags"/>
  <enum-type name="QTextLayout::CursorMode"/>
  <enum-type name="QTextLength::Type"/>
  <enum-type name="QTextLine::CursorPosition"/>
  <enum-type name="QTextLine::Edge"/>
  <enum-type name="QTextListFormat::Style"/>
  <enum-type name="QTextOption::Flag" flags="QTextOption::Flags"/>
  <enum-type name="QTextOption::WrapMode"/>
  <enum-type name="QToolButton::ToolButtonPopupMode"/>
  <enum-type name="QTreeWidgetItem::ItemType"/>
  <enum-type name="QTreeWidgetItem::enum_1"/>
  <enum-type name="QTreeWidgetItemIterator::IteratorFlag" flags="QTreeWidgetItemIterator::IteratorFlags"/>
  <enum-type name="QValidator::State"/>
  <enum-type name="QWidget::WidgetMode"/>
  <enum-type name="QWorkspace::WindowOrder"/>

  <enum-type name="QAccessible::Action">
    <reject-enum-value name="FirstStandardAction"/>
    <reject-enum-value name="LastStandardAction"/>
  </enum-type>

  <enum-type name="QBoxLayout::Direction">
    <reject-enum-value name="Down"/>
    <reject-enum-value name="Up"/>
  </enum-type>


  <enum-type name="QClipboard::Mode">
    <reject-enum-value name="LastMode"/>
  </enum-type>

  <enum-type name="QDialogButtonBox::StandardButton" flags="QDialogButtonBox::StandardButtons">
    <reject-enum-value name="FirstButton"/>
    <reject-enum-value name="LastButton"/>
  </enum-type>


  <enum-type name="QDockWidget::DockWidgetFeature" flags="QDockWidget::DockWidgetFeatures">
    <reject-enum-value name="AllDockWidgetFeatures"/>
  </enum-type>

  <enum-type name="QFont::StyleHint">
    <reject-enum-value name="SansSerif"/>
    <reject-enum-value name="Serif"/>
    <reject-enum-value name="TypeWriter"/>
    <reject-enum-value name="Decorative"/>
  </enum-type>

  <enum-type name="QFontDatabase::WritingSystem">
    <reject-enum-value name="Other"/>
  </enum-type>

  <enum-type name="QHeaderView::ResizeMode">
    <reject-enum-value name="Custom"/>
  </enum-type>


  <enum-type name="QMessageBox::StandardButton" flags="QMessageBox::StandardButtons">
    <reject-enum-value name="FirstButton"/>
    <reject-enum-value name="LastButton"/>
    <reject-enum-value name="YesAll"/>
    <reject-enum-value name="NoAll"/>
  </enum-type>

  <enum-type name="QPalette::ColorGroup">
    <reject-enum-value name="Normal"/>
  </enum-type>

  <enum-type name="QPalette::ColorRole">
    <reject-enum-value name="NColorRoles"/>
    <reject-enum-value name="Foreground"/>
    <reject-enum-value name="Background"/>
  </enum-type>

  <enum-type name="QPrinter::PageSize">
    <reject-enum-value name="NPageSize"/>
  </enum-type>

  <enum-type name="QSlider::TickPosition">
    <reject-enum-value name="TicksLeft"/>
    <reject-enum-value name="TicksRight"/>
  </enum-type>

  <enum-type name="QStyle::StyleHint" extensible="yes">
    <reject-enum-value name="SH_ScrollBar_StopMouseOverSlider"/>
  </enum-type>


  <enum-type name="QTextFormat::FormatType"/>

  <enum-type name="QTextFormat::Property">
    <reject-enum-value name="FontSizeIncrement"/>
  </enum-type>

  <value-type name="QStyleOption" polymorphic-base="yes" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_Default" />
  <value-type name="QStyleOptionGraphicsItem" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_GraphicsItem"/>
  <value-type name="QStyleOptionSizeGrip" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_SizeGrip"/>
  <value-type name="QStyleOptionButton" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_Button" />
  <value-type name="QStyleOptionComboBox" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_ComboBox" />
  <value-type name="QStyleOptionComplex" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_Complex" />
  <value-type name="QStyleOptionDockWidget" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_DockWidget" />
  <value-type name="QStyleOptionFocusRect" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_FocusRect" />
  <value-type name="QStyleOptionFrame" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_Frame &amp;&amp; %1-&gt;version == 1" />
  <value-type name="QStyleOptionFrameV2" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_Frame &amp;&amp; %1-&gt;version == 2" />
  <value-type name="QStyleOptionGroupBox" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_GroupBox" />
  <value-type name="QStyleOptionHeader" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_Header"/>
  <value-type name="QStyleOptionMenuItem" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_MenuItem"/>
  <value-type name="QStyleOptionProgressBar" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_ProgressBar &amp;&amp; %1-&gt;version == 1"/>
  <value-type name="QStyleOptionProgressBarV2" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_ProgressBar &amp;&amp; %1-&gt;version == 2"/>
  <value-type name="QStyleOptionRubberBand" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_RubberBand"/>
  <value-type name="QStyleOptionSlider" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_Slider"/>
  <value-type name="QStyleOptionSpinBox" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_SpinBox"/>
  <value-type name="QStyleOptionTab" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_Tab &amp;&amp; %1-&gt;version == 1"/>
  <value-type name="QStyleOptionTabV2" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_Tab &amp;&amp; %1-&gt;version == 2"/>              
  <value-type name="QStyleOptionTabBarBase" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_TabBarBase"/> 
  <value-type name="QStyleOptionTabWidgetFrame" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_TabWidgetFrame"/>
  <value-type name="QStyleOptionTitleBar" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_TitleBar"/>
  <value-type name="QStyleOptionToolBar" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_ToolBar"/>
  <value-type name="QStyleOptionToolBox" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_ToolBox"/>
  <value-type name="QStyleOptionToolButton" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_ToolButton"/>
  <value-type name="QStyleOptionViewItem" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_ViewItem &amp;&amp; %1->version == 1"/>  
  <value-type name="QStyleOptionViewItemV2" 
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_ViewItem &amp;&amp; %1->version == 2"/>  
                 
              
  <value-type name="QTextFragment"/>  
  <value-type name="QBitmap"/>  
  <value-type name="QTextInlineObject"/>
  <value-type name="QSizePolicy"/>
  <value-type name="QTableWidgetSelectionRange"/>
  <value-type name="QTextDocumentFragment"/>
  <value-type name="QTextOption"/>
  <value-type name="QTextLine"/>
  <value-type name="QTextTableFormat"/>
  <value-type name="QTextImageFormat"/>
  <value-type name="QTextFrameFormat"/>
  <value-type name="QTextLength"/>
  <value-type name="QItemSelectionRange"/>
  <value-type name="QLine"/>
  <value-type name="QLineF"/>
  <value-type name="QPainterPath"/>  
  <value-type name="QPalette"/>
  <value-type name="QKeySequence"/> 
  <value-type name="QPicture"/>
  <value-type name="QPolygonF"/>
  <value-type name="QRegion" expense-limit="4096"/>
  <value-type name="QTextBlock"/>
  <value-type name="QTextBlockFormat"/>
  <value-type name="QTextCharFormat"/>
  <value-type name="QTextFormat"/>
  <value-type name="QTextListFormat"/>

  <value-type name="QPolygon">
    <modify-function signature="QPolygon(int, const int *)">
      <remove/>
    </modify-function>
  </value-type>

  <value-type name="QIcon">
    <modify-function signature="pixmap(int,QIcon::Mode,QIcon::State)const">
        <remove />
    </modify-function> 
  </value-type>  

  <value-type name="QTextFrame::iterator">
    <include file-name="QTextFrame" location="global"/>
  </value-type>

  <value-type name="QTreeWidgetItemIterator">  
    <custom-constructor>
    return new QTreeWidgetItemIterator(*copy);
    </custom-constructor>
    <custom-destructor>
    delete copy;
    </custom-destructor>
   </value-type>

  <value-type name="QTextBlock::iterator">
    <include file-name="QTextBlock" location="global"/>
  </value-type>

  <value-type name="QAbstractTextDocumentLayout::PaintContext">
    <include file-name="QAbstractTextDocumentLayout" location="global"/>
  </value-type>

  <value-type name="QPixmap">
    <modify-function signature="QPixmap(const char **)">
        <access modifier="private"/>
    </modify-function>
    <modify-function signature="fill(const QColor &amp;)"> 
      <modify-argument index="1">
        <replace-default-expression with="QColor.white"/>
      </modify-argument>
    </modify-function>
    <inject-code>
        public QPixmap(String xpm[]) 
        {
            this(com.trolltech.qt.QNativePointer.createCharPointerPointer(xpm));
        }
    </inject-code>
  
    <extra-includes>
        <include file-name="QBitmap" location="global"/>
        <include file-name="QMatrix" location="global"/>
    </extra-includes>
    <modify-function class="java" signature="save(const QString &amp;, const char *, int) const">
        <access modifier="private"/>
        <rename to="private_save"/>
    </modify-function>
    <modify-function class="java" signature="save(QIODevice *, const char *, int) const">
        <access modifier="private"/>
        <rename to="private_save"/>
    </modify-function>
    <inject-code>
    public boolean save(com.trolltech.qt.core.QIODevice fileName, String format, int quality) {
        return private_save(fileName,  com.trolltech.qt.QNativePointer.createCharPointer(format), quality);
    }
    public boolean save(com.trolltech.qt.core.QIODevice fileName, String format) {
        return private_save(fileName,  com.trolltech.qt.QNativePointer.createCharPointer(format));
    }
    public boolean save(String fileName, String format, int quality) {
        return private_save(fileName,  com.trolltech.qt.QNativePointer.createCharPointer(format), quality);
    }
    public boolean save(String fileName, String format) {
        return private_save(fileName,  com.trolltech.qt.QNativePointer.createCharPointer(format));
    }
    </inject-code>
  </value-type>

  <value-type name="QTextCursor">
    <extra-includes>
        <include file-name="QTextBlock" location="global"/>
        <include file-name="QTextDocumentFragment" location="global"/>
    </extra-includes>  
  </value-type>

  <value-type name="QTextLayout::FormatRange">
    <include file-name="QTextLayout" location="global"/>
  </value-type>

  <value-type name="QInputMethodEvent::Attribute">
    <include file-name="QInputMethodEvent" location="global"/>
    <custom-constructor>
    return new QInputMethodEvent::Attribute(copy->type, copy->start, copy->length, copy->value);
    </custom-constructor>
    <custom-destructor>
    delete copy;
    </custom-destructor>
  </value-type>
  
  <value-type name="QItemSelection"> 
    <inject-code class="shell-declaration">
    QList&lt;QItemSelectionRange&gt; &amp;operator=(const QList&lt;QItemSelectionRange&gt; &amp;other)
    {
        return ((QList&lt;QItemSelectionRange&gt; *)this)-&gt;operator=(other);
    }    
    </inject-code>
  </value-type>

  <value-type name="QMatrix">
    <extra-includes>
        <include file-name="QPainterPath" location="global"/>
    </extra-includes>
  </value-type>

  <value-type name="QConicalGradient">
    <custom-constructor>
    return new QConicalGradient(copy->center(), copy->angle());
    </custom-constructor>
    <custom-destructor>
    delete copy;
    </custom-destructor>  
  </value-type>

  <value-type name="QFontInfo">
    <custom-constructor>
    return new QFontInfo(*copy);
    </custom-constructor>
    <custom-destructor>
    delete copy;
    </custom-destructor>
  </value-type>

  <value-type name="QRadialGradient">
    <custom-constructor>
    return new QRadialGradient(copy->center(), copy->radius(), copy->focalPoint());
    </custom-constructor>
    <custom-destructor>
    delete copy;
    </custom-destructor>
  </value-type>
    
  <value-type name="QPainterPath::Element">
    <modify-field name="x" write="false"/>
    <modify-field name="y" write="false"/>
    <include file-name="QPainterPath" location="global"/>
  </value-type>

  <value-type name="QTextEdit::ExtraSelection">
    <include file-name="QTextEdit" location="global"/>
  </value-type>

  <value-type name="QFont">
    <extra-includes>
        <include file-name="QStringList" location="global"/>
    </extra-includes>    
  </value-type>

  <value-type name="QTextTableCell">
    <extra-includes>
        <include file-name="QTextCursor" location="global"/>
    </extra-includes>
  </value-type>

  <value-type name="QImage" expense-limit="67108864" expense-cost="height()*bytesPerLine()">
    <modify-function signature="QImage(const char *, const char *)">
        <remove />
    </modify-function>
    <modify-function signature="QImage(const char **)">
        <access modifier="private"/>
    </modify-function>
    <modify-function signature="bits()const">
        <remove/>
    </modify-function>
    <modify-function signature="scanLine(int)const">
        <remove/>
    </modify-function>
    <modify-function signature="QImage(const unsigned char *, int, int, QImage::Format)">
        <remove/>
    </modify-function>
    <inject-code>
        public QImage(String xpm[]) 
        {
            this(com.trolltech.qt.QNativePointer.createCharPointerPointer(xpm));
        }
    </inject-code>
    
    <extra-includes>
        <include file-name="QStringList" location="global"/>
        <include file-name="QMatrix" location="global"/>
    </extra-includes>
    <modify-function class="java" signature="save(const QString &amp;, const char *, int) const">
        <access modifier="private"/>
        <rename to="private_save"/>
    </modify-function>
    <modify-function class="java" signature="save(QIODevice *, const char *, int) const">
        <access modifier="private"/>
        <rename to="private_save"/>
    </modify-function>
    <inject-code>
    public boolean save(com.trolltech.qt.core.QIODevice fileName, String format, int quality) {
        return private_save(fileName,  com.trolltech.qt.QNativePointer.createCharPointer(format), quality);
    }
    public boolean save(com.trolltech.qt.core.QIODevice fileName, String format) {
        return private_save(fileName,  com.trolltech.qt.QNativePointer.createCharPointer(format));
    }
    public boolean save(String fileName, String format, int quality) {
        return private_save(fileName,  com.trolltech.qt.QNativePointer.createCharPointer(format), quality);
    }
    public boolean save(String fileName, String format) {
        return private_save(fileName,  com.trolltech.qt.QNativePointer.createCharPointer(format));
    }
    </inject-code>
  </value-type>

  <value-type name="QColormap">
    <extra-includes>
        <include file-name="QColor" location="global"/>
    </extra-includes>           
    <custom-constructor>
    return new QColormap(*copy);
    </custom-constructor>
    <custom-destructor>
    delete copy;
    </custom-destructor>    
  </value-type>

  <value-type name="QCursor">
    <extra-includes>
        <include file-name="QPixmap" location="global"/>
    </extra-includes>
  </value-type>
      
  <value-type name="QFontDatabase">
      <extra-includes>
        <include file-name="QStringList" location="global"/>
    </extra-includes>
  </value-type>  

  <value-type name="QPen">
      <extra-includes>
        <include file-name="QBrush" location="global"/>
    </extra-includes>
    <inject-code>
    public QPen(QColor color, double width, com.trolltech.qt.core.Qt.PenStyle s, com.trolltech.qt.core.Qt.PenCapStyle c, com.trolltech.qt.core.Qt.PenJoinStyle j) {
        this(new QBrush(color), width, s, c, j);
    }
    public QPen(QColor color, double width, com.trolltech.qt.core.Qt.PenStyle s, com.trolltech.qt.core.Qt.PenCapStyle c) {
        this(new QBrush(color), width, s, c);
    }
    public QPen(QColor color, double width, com.trolltech.qt.core.Qt.PenStyle s) {
        this(new QBrush(color), width, s);
    }
    public QPen(QColor color, double width) {
        this(new QBrush(color), width);
    }
    public static final QPen NoPen = new QPen(com.trolltech.qt.core.Qt.PenStyle.NoPen);
    </inject-code>
  </value-type>  
  
  <value-type name="QBrush">
    <modify-function class="java" signature="QBrush(Qt::GlobalColor, Qt::BrushStyle)">
      <remove/>
    </modify-function>
      <extra-includes>
        <include file-name="QPixmap" location="global"/>
    </extra-includes>    
    <inject-code class="java">
    public static final QBrush NoBrush = new QBrush(com.trolltech.qt.core.Qt.BrushStyle.NoBrush);
    </inject-code>
  </value-type>

  <value-type name="QColor">
    <modify-function signature="QColor(QColor::Spec)">
        <remove/>
    </modify-function>
    <inject-code class="java">
    public static final QColor white = new QColor(com.trolltech.qt.core.Qt.GlobalColor.white);
    public static final QColor black = new QColor(com.trolltech.qt.core.Qt.GlobalColor.black);
    public static final QColor red = new QColor(com.trolltech.qt.core.Qt.GlobalColor.red);
    public static final QColor darkRed = new QColor(com.trolltech.qt.core.Qt.GlobalColor.darkRed);
    public static final QColor green = new QColor(com.trolltech.qt.core.Qt.GlobalColor.green);
    public static final QColor darkGreen = new QColor(com.trolltech.qt.core.Qt.GlobalColor.darkGreen);
    public static final QColor blue = new QColor(com.trolltech.qt.core.Qt.GlobalColor.blue);
    public static final QColor darkBlue = new QColor(com.trolltech.qt.core.Qt.GlobalColor.darkBlue);
    public static final QColor cyan = new QColor(com.trolltech.qt.core.Qt.GlobalColor.cyan);
    public static final QColor darkCyan = new QColor(com.trolltech.qt.core.Qt.GlobalColor.darkCyan);
    public static final QColor magenta = new QColor(com.trolltech.qt.core.Qt.GlobalColor.magenta);
    public static final QColor darkMagenta = new QColor(com.trolltech.qt.core.Qt.GlobalColor.darkMagenta);
    public static final QColor yellow = new QColor(com.trolltech.qt.core.Qt.GlobalColor.yellow);
    public static final QColor darkYellow = new QColor(com.trolltech.qt.core.Qt.GlobalColor.darkYellow);
    public static final QColor gray = new QColor(com.trolltech.qt.core.Qt.GlobalColor.gray);
    public static final QColor darkGray = new QColor(com.trolltech.qt.core.Qt.GlobalColor.darkGray);
    public static final QColor lightGray = new QColor(com.trolltech.qt.core.Qt.GlobalColor.lightGray);
    public static final QColor transparent = new QColor(com.trolltech.qt.core.Qt.GlobalColor.transparent);
    public static final QColor color0 = new QColor(com.trolltech.qt.core.Qt.GlobalColor.color0);
    public static final QColor color1 = new QColor(com.trolltech.qt.core.Qt.GlobalColor.color1);
    </inject-code>
  </value-type>
 
  <value-type name="QFontMetricsF">
    <custom-constructor>
        return new QFontMetricsF(*copy);
    </custom-constructor>
    <custom-destructor>
        delete copy;
    </custom-destructor>
    <modify-function signature="operator!=(const QFontMetricsF &amp;)">
        <remove/>
    </modify-function>
    <modify-function signature="operator==(const QFontMetricsF &amp;)">
        <remove/>
    </modify-function>        
  </value-type>

  <value-type name="QFontMetrics">
    <custom-constructor>
        return new QFontMetrics(*copy);
    </custom-constructor>
    <custom-destructor>
        delete copy;
    </custom-destructor>
    <modify-function signature="operator!=(const QFontMetrics &amp;)">
        <remove/>
    </modify-function>
    <modify-function signature="operator==(const QFontMetrics &amp;)">
        <remove/>
    </modify-function>    
  </value-type>

  <value-type name="QGradient">
    <custom-constructor>
    if (copy->type() == QGradient::LinearGradient) {
        const QLinearGradient *lg_copy = static_cast&lt;const QLinearGradient *&gt;(copy);
        QLinearGradient *lg = new QLinearGradient(lg_copy->start(), lg_copy->finalStop());
        lg->setSpread(copy->spread());
        lg->setStops(copy->stops());
        return (void *) lg;
    }
    return 0;
    </custom-constructor>
    <custom-destructor>
    delete copy;
    </custom-destructor>
    <modify-function signature="operator==(const QGradient &amp;)">
        <remove/>
    </modify-function>        
  </value-type>

  <value-type name="QLinearGradient">
    <custom-constructor>
    QLinearGradient *lg = new QLinearGradient(copy->start(), copy->finalStop());
    lg->setSpread(copy->spread());
    lg->setStops(copy->stops());
    return (void *) lg;
    </custom-constructor>
    <custom-destructor>
    delete copy;
    </custom-destructor>
  </value-type>
    
  <interface-type name="QLayoutItem"/>
  <interface-type name="QPaintDevice"/>

  <interface-type name="QGraphicsItem">
    <modify-function signature="children()const">	
      <rename to="childItems"/>
    </modify-function>
    <modify-function signature="paint(QPainter *, const QStyleOptionGraphicsItem *, QWidget *)">
       <modify-argument index="2"> 
           <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOptionGraphicsItem", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
           </conversion-rule>       
        <replace-type modified-type="com.trolltech.qt.gui.QStyleOptionGraphicsItem" />
       </modify-argument>
    </modify-function>
    <modify-function class="native" signature="paint(QPainter *, const QStyleOptionGraphicsItem *, QWidget *)">
         <modify-argument index="2">
            <conversion-rule>
                const QStyleOptionGraphicsItem *%out = (QStyleOptionGraphicsItem *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>
         </modify-argument>
    </modify-function>
  </interface-type>  
  
  <object-type name="QAbstractGraphicsShapeItem" />
    
  <object-type name="QAbstractItemView"/>  
  <object-type name="QAbstractPageSetupDialog"/>
  <object-type name="QAbstractPrintDialog"/>
  <object-type name="QAbstractSlider"/>  
  <object-type name="QAbstractTextDocumentLayout"/>
  <object-type name="QAccessible"/>
  <object-type name="QAccessibleBridge"/>
  <object-type name="QAccessibleBridgeFactoryInterface"/>
  <object-type name="QAccessibleBridgePlugin"/>
  <object-type name="QAccessibleFactoryInterface"/>
  <object-type name="QAccessibleInterface"/>
  <object-type name="QAccessibleInterfaceEx"/>
  <object-type name="QAccessibleObject"/>
  <object-type name="QAccessibleObjectEx"/>
  <object-type name="QAccessiblePlugin"/>
  <object-type name="QAccessibleWidget"/>
  <object-type name="QAccessibleWidgetEx"/>  
  <object-type name="QActionGroup"/>
  <object-type name="QCDEStyle"/>
  <object-type name="QCheckBox"/>
  <object-type name="QCleanlooksStyle"/>
  <object-type name="QCommonStyle"/>
  <object-type name="QDataWidgetMapper"/>
  <object-type name="QDateEdit"/>
  <object-type name="QDesktopServices"/>
  <object-type name="QDialog"/>  
  <object-type name="QDialogButtonBox"/>
  <object-type name="QDirModel"/>
  <object-type name="QDoubleValidator"/>
  <object-type name="QFileIconProvider"/>
  <object-type name="QFocusFrame"/>
  <object-type name="QFontComboBox"/>
  <object-type name="QFontDialog"/>
  <object-type name="QGraphicsEllipseItem"/>
  <object-type name="QGraphicsItemAnimation"/>
  <object-type name="QGraphicsItemGroup"/>
  <object-type name="QGraphicsLineItem"/>
  <object-type name="QGraphicsPathItem"/>
  <object-type name="QGraphicsPixmapItem"/>
  <object-type name="QGraphicsPolygonItem"/>
  <object-type name="QGraphicsRectItem"/>
  <object-type name="QGraphicsSimpleTextItem"/>
  <object-type name="QHBoxLayout"/>
  <object-type name="QHeaderView"/>
  <object-type name="QIconEngine"/>
  <object-type name="QIconEngineFactoryInterface"/>
  <object-type name="QIconEnginePlugin"/>
  <object-type name="QImageIOHandlerFactoryInterface"/>
  <object-type name="QImageIOPlugin"/>
  <object-type name="QImageWriter"/>
  <object-type name="QInputContextFactory"/>
  <object-type name="QInputContextFactoryInterface"/>
  <object-type name="QInputContextPlugin"/>
  <object-type name="QIntValidator"/>
  <object-type name="QItemDelegate"/>  
  <object-type name="QItemEditorCreatorBase"/>
  <object-type name="QItemEditorFactory"/>
  <object-type name="QItemSelectionModel"/>
  <object-type name="QListView"/>
  <object-type name="QMainWindow"/>
  <object-type name="QMenu"/>
  <object-type name="QMenuBar"/>
  <object-type name="QMotifStyle"/>
  <object-type name="QPainterPathStroker"/>
  <object-type name="QPictureFormatInterface"/>
  <object-type name="QPictureFormatPlugin"/>
  <object-type name="QPictureIO"/>
  <object-type name="QPixmapCache"/>
  <object-type name="QPlastiqueStyle"/>
  <object-type name="QPrintDialog"/>  
  <object-type name="QPrintEngine"/>
  <object-type name="QProgressBar"/>
  <object-type name="QPushButton"/>
  <object-type name="QReadWriteLock"/>
  <object-type name="QRegExpValidator"/>
  <object-type name="QScrollArea"/>
  <object-type name="QSessionManager"/>
  <object-type name="QShortcut"/>
  <object-type name="QSizeGrip"/>
  <object-type name="QSound"/>  
  <object-type name="QSpacerItem"/>
  <object-type name="QStandardItem"/>
  <object-type name="QStatusBar"/>
  <object-type name="QStringListModel"/>
  <object-type name="QStyleFactory"/>
  <object-type name="QStyleFactoryInterface"/>
  <object-type name="QStyleHintReturn"/>
  <object-type name="QStyleHintReturnMask"/>
  <object-type name="QStylePainter"/>
  <object-type name="QStylePlugin"/>
  <object-type name="QSyntaxHighlighter"/>
  <object-type name="QSystemTrayIcon"/>
  <object-type name="QTableView"/>
  <object-type name="QTextBlockGroup"/>
  <object-type name="QTextBlockUserData"/>
  <object-type name="QTextItem"/>
  <object-type name="QTextList"/>
  <object-type name="QTextObject"/>
  <object-type name="QTextObjectInterface"/>
  <object-type name="QTimeEdit"/>
  <object-type name="QToolBox"/>
  <object-type name="QToolButton"/>
  <object-type name="QToolTip"/>
  <object-type name="QTreeView"/>
  <object-type name="QUndoCommand"/>
  <object-type name="QUndoGroup"/>
  <object-type name="QUndoStack"/>
  <object-type name="QUndoView"/>
  <object-type name="QVBoxLayout"/>
  <object-type name="QValidator"/>
  <object-type name="QWhatsThis"/>
  <object-type name="QWidgetAction"/>
  <object-type name="QWidgetItem"/>
  <object-type name="QWindowsStyle"/>
  <object-type name="QWorkspace"/>
  
  <object-type name="QActionEvent"
           polymorphic-id-expression="%1->type() == QEvent::ActionAdded || %1->type() == QEvent::ActionRemoved || %1->type() == QEvent::ActionChanged" />
  <object-type name="QClipboardEvent"
           polymorphic-id-expression="%1->type() == QEvent::Clipboard" />
  <object-type name="QCloseEvent"
           polymorphic-id-expression="%1->type() == QEvent::Close"/>  
  <object-type name="QContextMenuEvent"
           polymorphic-id-expression="%1->type() == QEvent::ContextMenu"/>
  <object-type name="QDragEnterEvent"
           polymorphic-id-expression="%1->type() == QEvent::DragEnter"/>
  <object-type name="QDragLeaveEvent"
           polymorphic-id-expression="%1->type() == QEvent::DragLeave"/>
  <object-type name="QDragMoveEvent"
           polymorphic-id-expression="%1->type() == QEvent::DragMove"/>
  <object-type name="QDropEvent"
           polymorphic-id-expression="%1->type() == QEvent::Drop"/>
  <object-type name="QFileOpenEvent"
           polymorphic-id-expression="%1->type() == QEvent::FileOpen"/>
  <object-type name="QFocusEvent"
           polymorphic-id-expression="%1->type() == QEvent::FocusIn || %1->type() == QEvent::FocusOut">
        <modify-function signature="reason()const">
            <remove/>
        </modify-function>                   
  </object-type>
           
  <object-type name="QGraphicsSceneContextMenuEvent"
               polymorphic-id-expression="%1->type() == QEvent::GraphicsSceneContextMenu"/>
  <object-type name="QGraphicsSceneDragDropEvent"
               polymorphic-id-expression="%1->type() == QEvent::GraphicsSceneDragEnter || %1->type() == QEvent::GraphicsSceneDragLeave || %1->type() == QEvent::GraphicsSceneDragMove || %1->type() == QEvent::GraphicsSceneDrop"/>
  <object-type name="QGraphicsSceneEvent"/>
  <object-type name="QGraphicsSceneHelpEvent"
               polymorphic-id-expression="%1->type() == QEvent::GraphicsSceneHelp"/>
  <object-type name="QGraphicsSceneHoverEvent"
               polymorphic-id-expression="%1->type() == QEvent::GraphicsSceneHoverEnter || %1->type() == QEvent::GraphicsSceneHoverLeave || %1->type() == QEvent::GraphicsSceneHoverMove"/>
  <object-type name="QGraphicsSceneMouseEvent"
               polymorphic-id-expression="%1->type() == QEvent::GraphicsSceneMouseDoubleClick || %1->type() == QEvent::GraphicsSceneMouseMove || %1->type() == QEvent::GraphicsSceneMousePress || %1->type() == QEvent::GraphicsSceneMouseRelease"/>
  <object-type name="QGraphicsSceneWheelEvent"
               polymorphic-id-expression="%1->type() == QEvent::GraphicsSceneWheel"/>
  <object-type name="QHelpEvent" 
               polymorphic-id-expression="%1->type() == QEvent::ToolTip || %1->type() == QEvent::WhatsThis"/>
  <object-type name="QHideEvent" 
               polymorphic-id-expression="%1->type() == QEvent::Hide"/>
  <object-type name="QHoverEvent"
               polymorphic-id-expression="%1->type() == QEvent::HoverEnter || %1->type() == QEvent::HoverLeave || %1->type() == QEvent::HoverMove"/>
  <object-type name="QIconDragEvent"
               polymorphic-id-expression="%1->type() == QEvent::IconDrag"/>
  <object-type name="QInputMethodEvent"
               polymorphic-id-expression="%1->type() == QEvent::InputMethod"/>
  <object-type name="QMoveEvent"
               polymorphic-id-expression="%1->type() == QEvent::Move"/>
  <object-type name="QResizeEvent"
               polymorphic-id-expression="%1->type() == QEvent::Resize"/>
  <object-type name="QShortcutEvent"
               polymorphic-id-expression="%1->type() == QEvent::Shortcut">
        <modify-function signature="isAmbiguous()">
            <remove />
        </modify-function>               
        <modify-function signature="shortcutId()">
            <remove />
        </modify-function>                    
        <modify-function signature="key()">
            <remove />
        </modify-function>                          
  </object-type>
  <object-type name="QShowEvent"
               polymorphic-id-expression="%1->type() == QEvent::Show"/>
  <object-type name="QStatusTipEvent"
               polymorphic-id-expression="%1->type() == QEvent::StatusTip"/>
  <object-type name="QTabletEvent"
               polymorphic-id-expression="%1->type() == QEvent::TabletMove || %1->type() == QEvent::TabletPress || %1->type() == QEvent::TabletRelease"/>
  <object-type name="QToolBarChangeEvent"
               polymorphic-id-expression="%1->type() == QEvent::ToolBarChange"/>
  <object-type name="QWhatsThisClickedEvent"
               polymorphic-id-expression="%1->type() == QEvent::WhatsThisClicked"/>
  <object-type name="QWheelEvent"
               polymorphic-id-expression="%1->type() == QEvent::Wheel"/>
  <object-type name="QWindowStateChangeEvent"
               polymorphic-id-expression="%1->type() == QEvent::WindowStateChange"/>
  <object-type name="QDragResponseEvent" 
               polymorphic-id-expression="%1->type() == QEvent::DragResponse"/>
  <object-type name="QInputEvent" />  
  <object-type name="QKeyEvent" 
               polymorphic-id-expression="%1->type() == QEvent::KeyPress || %1->type() == QEvent::KeyRelease"/>
  <object-type name="QMouseEvent" 
               polymorphic-id-expression="%1->type() == QEvent::MouseButtonDblClick || %1->type() == QEvent::MouseButtonPress || %1->type() == QEvent::MouseButtonRelease || %1->type() == QEvent::MouseMove"/>
  <object-type name="QPaintEvent" 
               polymorphic-id-expression="%1->type() == QEvent::Paint"/>
  <object-type name="QAccessibleEvent"
               polymorphic-id-expression="%1->type() == QEvent::AccessibilityDescription || %1->type() == QEvent::AccessibilityHelp"/>
  
  <object-type name="QAbstractButton">
    <inject-code class="java">
        public void setShortcut(String key) { setShortcut(new QKeySequence(key)); }
    </inject-code>
  </object-type>

  <object-type name="QStyle">
    <modify-function signature="drawControl(QStyle::ControlElement, const QStyleOption *, QPainter *, const QWidget *) const">
        <modify-argument index="2">
            <replace-type modified-type="com.trolltech.qt.gui.QStyleOption" />
            <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOption", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="drawControl(QStyle::ControlElement, const QStyleOption *, QPainter *, const QWidget *) const">
        <modify-argument index="2">
            <conversion-rule>
                QStyleOption *%out = (QStyleOption *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>        
        </modify-argument>
    </modify-function>

    <modify-function signature="drawComplexControl(QStyle::ComplexControl, const QStyleOptionComplex *, QPainter *, const QWidget *) const">
        <modify-argument index="2">
            <replace-type modified-type="com.trolltech.qt.gui.QStyleOptionComplex" />
            <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOptionComplex", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="drawComplexControl(QStyle::ComplexControl, const QStyleOptionComplex *, QPainter *, const QWidget *) const">
        <modify-argument index="2">
            <conversion-rule>
                QStyleOption *%out = (QStyleOption *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>        
        </modify-argument>
    </modify-function>

    <modify-function signature="drawPrimitive(QStyle::PrimitiveElement, const QStyleOption *, QPainter *, const QWidget *) const">
        <modify-argument index="2">
            <replace-type modified-type="com.trolltech.qt.gui.QStyleOption" />
            <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOption", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="drawPrimitive(QStyle::PrimitiveElement, const QStyleOption *, QPainter *, const QWidget *) const">
        <modify-argument index="2">
            <conversion-rule>
                QStyleOption *%out = (QStyleOption *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>        
        </modify-argument>
    </modify-function>

    <modify-function signature="hitTestComplexControl(QStyle::ComplexControl, const QStyleOptionComplex *, const QPoint &amp;, const QWidget *) const">
        <modify-argument index="2">
            <replace-type modified-type="com.trolltech.qt.gui.QStyleOptionComplex" />
            <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOptionComplex", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="hitTestComplexControl(QStyle::ComplexControl, const QStyleOptionComplex *, const QPoint &amp;, const QWidget *) const">
        <modify-argument index="2">
            <conversion-rule>
                QStyleOption *%out = (QStyleOption *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>        
        </modify-argument>
    </modify-function>
    
    <modify-function signature="pixelMetric(QStyle::PixelMetric, const QStyleOption *, const QWidget *) const">
        <modify-argument index="2">
            <replace-type modified-type="com.trolltech.qt.gui.QStyleOption" />
            <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOption", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="pixelMetric(QStyle::PixelMetric, const QStyleOption *, const QWidget *) const">
        <modify-argument index="2">
            <conversion-rule>
                QStyleOption *%out = (QStyleOption *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>        
        </modify-argument>
    </modify-function>

    <modify-function signature="sizeFromContents(QStyle::ContentsType, const QStyleOption *, const QSize &amp;, const QWidget *) const">
        <modify-argument index="2">
            <replace-type modified-type="com.trolltech.qt.gui.QStyleOption" />
            <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOption", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
            </conversion-rule>
       </modify-argument>
    </modify-function>
    <modify-function class="native" signature="sizeFromContents(QStyle::ContentsType, const QStyleOption *, const QSize &amp;, const QWidget *) const">
        <modify-argument index="2">
            <conversion-rule>
                QStyleOption *%out = (QStyleOption *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>        
        </modify-argument>
    </modify-function>

    <modify-function signature="standardIcon(QStyle::StandardPixmap, const QStyleOption *, const QWidget *) const">
        <modify-argument index="2">
            <replace-type modified-type="com.trolltech.qt.gui.QStyleOption" />
            <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOption", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="standardIcon(QStyle::StandardPixmap, const QStyleOption *, const QWidget *) const">
        <modify-argument index="2">
            <conversion-rule>
                QStyleOption *%out = (QStyleOption *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>        
        </modify-argument>>
    </modify-function>
    
    <modify-function signature="standardPixmap(QStyle::StandardPixmap, const QStyleOption *, const QWidget *) const">
        <modify-argument index="2">            
            <replace-type modified-type="com.trolltech.qt.gui.QStyleOption" />
            <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOption", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="standardPixmap(QStyle::StandardPixmap, const QStyleOption *, const QWidget *) const">
        <modify-argument index="2">
            <conversion-rule>
                QStyleOption *%out = (QStyleOption *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>        
        </modify-argument>
    </modify-function>
    
    <modify-function signature="styleHint(QStyle::StyleHint, const QStyleOption *, const QWidget *, QStyleHintReturn *) const">
        <modify-argument index="2">
            <replace-type modified-type="com.trolltech.qt.gui.QStyleOption" />
            <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOption", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="styleHint(QStyle::StyleHint, const QStyleOption *, const QWidget *, QStyleHintReturn *) const">    
        <modify-argument index="2">
            <conversion-rule>
                QStyleOption *%out = (QStyleOption *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>        
        </modify-argument>
    </modify-function>
    
    <modify-function signature="subControlRect(QStyle::ComplexControl, const QStyleOptionComplex *, QStyle::SubControl, const QWidget *) const">
        <modify-argument index="2">
            <replace-type modified-type="com.trolltech.qt.gui.QStyleOptionComplex" />
            <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOptionComplex", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="subControlRect(QStyle::ComplexControl, const QStyleOptionComplex *, QStyle::SubControl, const QWidget *) const">
        <modify-argument index="2">
            <conversion-rule>
                QStyleOptionComplex *%out = (QStyleOptionComplex *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>        
        </modify-argument>
    </modify-function>
    
    <modify-function signature="subElementRect(QStyle::SubElement, const QStyleOption *, const QWidget *) const">
        <modify-argument index="2">
            <replace-type modified-type="com.trolltech.qt.gui.QStyleOption" />
            <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOption", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="subElementRect(QStyle::SubElement, const QStyleOption *, const QWidget *) const">
        <modify-argument index="2">
            <conversion-rule>
                QStyleOption *%out = (QStyleOption *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>        
        </modify-argument>
    </modify-function>     
  </object-type>


  <object-type name="QColorDialog">
    <modify-function signature="getColor(const QColor &amp;, QWidget *)">
      <modify-argument index="1">
        <replace-default-expression with="QColor.white"/>      
      </modify-argument>
    </modify-function>
  </object-type>
  
  <object-type name="QLayout">  
    <modify-function signature="addItem(QLayoutItem *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="addChildLayout(QLayout *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="addChildLayout(QLayout *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="itemAt(int) const">
        <modify-argument index="return">
            <disable-gc />
        </modify-argument>
    </modify-function>            
  </object-type>

  <object-type name="QStackedLayout">  
    <modify-function signature="addItem(QLayoutItem *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="addChildLayout(QLayout *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="addChildLayout(QLayout *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="itemAt(int) const">
        <modify-argument index="return">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="addWidget(QWidget *)">
        <rename to="addStackedWidget"/>
    </modify-function>    
  </object-type>
  
  <object-type name="QBoxLayout">  
    <modify-function signature="addItem(QLayoutItem *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="addChildLayout(QLayout *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="addChildLayout(QLayout *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="insertLayout(int, QLayout *, int)">
        <modify-argument index="2">
            <disable-gc />
        </modify-argument>
    </modify-function>    
    <modify-function signature="insertItem(int, QLayoutItem *)">
        <modify-argument index="2">
            <disable-gc />
        </modify-argument>            
    </modify-function>    
    <modify-function signature="addLayout(QLayout *, int)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>            
  </object-type>

  <object-type name="QGridLayout">  
    <modify-function signature="addItem(QLayoutItem *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="addItem(QLayoutItem *, int, int, int, int, QFlags&lt;Qt::AlignmentFlag&gt;)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>    
    <modify-function signature="addLayout(QLayout *, int, int, QFlags&lt;Qt::AlignmentFlag&gt;)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="addLayout(QLayout *, int, int, int, int, QFlags&lt;Qt::AlignmentFlag&gt;)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>            
    <modify-function signature="addChildLayout(QLayout *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="addChildLayout(QLayout *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
  </object-type>
  
  <object-type name="QGraphicsView">
    <extra-includes>
      <include file-name="QPainterPath" location="global"/>
    </extra-includes>
  </object-type>
  
  <object-type name="QInputDialog">
    <modify-function signature="getDouble(QWidget *, const QString &amp;, const QString &amp;, double, double, double, int, bool *, QFlags&lt;Qt::WindowType>)">
        <rename to="getDouble_internal"/>
        <access modifier="private" />
    </modify-function>
    <inject-code>
    public static Double getDouble(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, double value, double minValue, double maxValue, int decimals, com.trolltech.qt.core.Qt.WindowType ... f) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        double result = getDouble_internal(parent, title, label, value, minValue, maxValue, decimals, ok, f);
        return ok.booleanValue() ? result : null;
    }
    
    public static Double getDouble(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, double value, double minValue, double maxValue) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        double result = getDouble_internal(parent, title, label, value, minValue, maxValue, 1, ok);
        return ok.booleanValue() ? result : null;
    }

    public static Double getDouble(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, double value, double minValue, double maxValue, int decimals) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        double result = getDouble_internal(parent, title, label, value, minValue, maxValue, decimals, ok);
        return ok.booleanValue() ? result : null;
    }    

    public static Double getDouble(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, double value, double minValue) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        double result = getDouble_internal(parent, title, label, value, minValue, (double)2147483647, (int)1, ok);
        return ok.booleanValue() ? result : null;
    }    

    public static Double getDouble(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, double value) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        double result = getDouble_internal(parent, title, label, value, (double)-2147483647, (double)2147483647, (int)1, ok);
        return ok.booleanValue() ? result : null;
    }    
    
    public static Double getDouble(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        double result = getDouble_internal(parent, title, label, 0.0, (double)-2147483647, (double)2147483647, (int)1, ok);
        return ok.booleanValue() ? result : null;
    }    
    
    public static Double getDouble(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, double value, double minValue, double maxValue, int decimals, com.trolltech.qt.core.Qt.WindowFlags f) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        double result = getDouble_internal(parent, title, label, value, minValue, maxValue, decimals, ok, f);
        return ok.booleanValue() ? result : null;
    }        
    </inject-code>
    
    <modify-function signature="getInteger(QWidget *, const QString &amp;, const QString &amp;, int, int, int, int, bool *, QFlags&lt;Qt::WindowType>)">
        <rename to="getInteger_internal"/>
        <access modifier="private" />
    </modify-function>
    <inject-code>
    public static Integer getInteger(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, int value, int minValue, int maxValue, int step, com.trolltech.qt.core.Qt.WindowType ... f) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        int result = com.trolltech.qt.gui.QInputDialog.getInteger_internal(parent, title, label, value, minValue, maxValue, step, ok, f);
        return ok.booleanValue() ? result : null;
    }

    public static Integer getInteger(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, int value, int minValue, int maxValue, int step) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        int result = com.trolltech.qt.gui.QInputDialog.getInteger_internal(parent, title, label, value, minValue, maxValue, step, ok);
        return ok.booleanValue() ? result : null;
    }

    public static Integer getInteger(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, int value, int minValue, int maxValue) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        int result = com.trolltech.qt.gui.QInputDialog.getInteger_internal(parent, title, label, value, minValue, maxValue, 1, ok);
        return ok.booleanValue() ? result : null;
    }

    public static Integer getInteger(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, int value, int minValue) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        int result = com.trolltech.qt.gui.QInputDialog.getInteger_internal(parent, title, label, value, minValue, (int)2147483647, 1, ok);
        return ok.booleanValue() ? result : null;
    }

    public static Integer getInteger(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, int value) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        int result = com.trolltech.qt.gui.QInputDialog.getInteger_internal(parent, title, label, value, (int)-2147483647, (int)2147483647, 1, ok);
        return ok.booleanValue() ? result : null;
    }

    public static Integer getInteger(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        int result = com.trolltech.qt.gui.QInputDialog.getInteger_internal(parent, title, label, 0, (int)-2147483647, (int)2147483647, 1, ok);
        return ok.booleanValue() ? result : null;
    }

    public static Integer getInteger(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, int value, int minValue, int maxValue, int step, com.trolltech.qt.core.Qt.WindowFlags f) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        int result = com.trolltech.qt.gui.QInputDialog.getInteger_internal(parent, title, label, value, minValue, maxValue, step, ok, f);
        return ok.booleanValue() ? result : null;
    }    
    </inject-code>
    
    <modify-function signature="getItem(QWidget *, const QString &amp;, const QString &amp;, const QStringList&lt;QString> &amp;, int, bool, bool *, QFlags&lt;Qt::WindowType>)">
        <rename to="getItem_internal"/>
        <access modifier="private" />
    </modify-function>
    <inject-code>
    public static java.lang.String getItem(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, java.util.List&lt;java.lang.String> list, int current, boolean editable, com.trolltech.qt.core.Qt.WindowType ... f) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        String result = com.trolltech.qt.gui.QInputDialog.getItem_internal(parent, title, label, list, current, editable, ok, new com.trolltech.qt.core.Qt.WindowFlags(f));
        return ok.booleanValue() ? result : null;
    }

    public static java.lang.String getItem(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, java.util.List&lt;java.lang.String> list, int current, boolean editable) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        String result = com.trolltech.qt.gui.QInputDialog.getItem_internal(parent, title, label, list, current, editable, ok);
        return ok.booleanValue() ? result : null;
    }
    
    public static java.lang.String getItem(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, java.util.List&lt;java.lang.String> list, int current) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        String result = com.trolltech.qt.gui.QInputDialog.getItem_internal(parent, title, label, list, current, true, ok);
        return ok.booleanValue() ? result : null;
    }

    public static java.lang.String getItem(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, java.util.List&lt;java.lang.String> list) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        String result = com.trolltech.qt.gui.QInputDialog.getItem_internal(parent, title, label, list, 0, true, ok);
        return ok.booleanValue() ? result : null;
    }

    public static java.lang.String getItem(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, java.util.List&lt;java.lang.String> list, int current, boolean editable, com.trolltech.qt.core.Qt.WindowFlags f) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        String result = com.trolltech.qt.gui.QInputDialog.getItem_internal(parent, title, label, list, current, editable, ok, f);
        return ok.booleanValue() ? result : null;
    }
    
    </inject-code>
    
    <modify-function signature="getText(QWidget *, const QString &amp;, const QString &amp;, QLineEdit::EchoMode, const QString &amp;, bool *, QFlags&lt;Qt::WindowType>)">
        <rename to="getText_internal"/>
        <access modifier="private" />
    </modify-function>
    <inject-code>
    public static java.lang.String getText(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, com.trolltech.qt.gui.QLineEdit.EchoMode echo, java.lang.String text, com.trolltech.qt.core.Qt.WindowType ... f) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        String result = com.trolltech.qt.gui.QInputDialog.getText_internal(parent, title, label, echo, text, ok, f);
        return ok.booleanValue() ? result : null;
    }

    public static java.lang.String getText(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, com.trolltech.qt.gui.QLineEdit.EchoMode echo, java.lang.String text) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        String result = com.trolltech.qt.gui.QInputDialog.getText_internal(parent, title, label, echo, text, ok);
        return ok.booleanValue() ? result : null;
    }

    public static java.lang.String getText(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, com.trolltech.qt.gui.QLineEdit.EchoMode echo) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        String result = com.trolltech.qt.gui.QInputDialog.getText_internal(parent, title, label, echo, "", ok);
        return ok.booleanValue() ? result : null;
    }
    
    public static java.lang.String getText(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        String result = com.trolltech.qt.gui.QInputDialog.getText_internal(parent, title, label, com.trolltech.qt.gui.QLineEdit.EchoMode.Normal, "", ok);
        return ok.booleanValue() ? result : null;
    }

    public static java.lang.String getText(com.trolltech.qt.gui.QWidget parent, java.lang.String title, java.lang.String label, com.trolltech.qt.gui.QLineEdit.EchoMode echo, java.lang.String text, com.trolltech.qt.core.Qt.WindowFlags f) {
        com.trolltech.qt.QNativePointer ok = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Boolean);
        String result = com.trolltech.qt.gui.QInputDialog.getText_internal(parent, title, label, echo, text, ok, f);
        return ok.booleanValue() ? result : null;
    }
    
    </inject-code>
    
  </object-type>
  

  <object-type name="QGraphicsScene">
    <modify-function signature="addItem(QGraphicsItem *)">
      <modify-argument index="1">
        <disable-gc />
      </modify-argument>
    </modify-function>   
    <modify-function signature="addEllipse(const QRectF &amp;, const QPen &amp;, const QBrush &amp;)">
      <modify-argument index="return">
        <disable-gc />
      </modify-argument>
    </modify-function>
    <modify-function signature="addLine(const QLineF &amp;, const QPen &amp;)">
      <modify-argument index="return">
        <disable-gc />
      </modify-argument>
    </modify-function>
    <modify-function signature="addPath(const QPainterPath &amp;, const QPen &amp;, const QBrush &amp;)">
      <modify-argument index="return">
        <disable-gc />
      </modify-argument>
    </modify-function>
    <modify-function signature="addPixmap(const QPixmap &amp;)">
        <modify-argument index="return">
            <disable-gc/>
        </modify-argument>
    </modify-function>
    <modify-function signature="addPolygon(const QPolygonF &amp;, const QPen &amp;, const QBrush &amp;)">
        <modify-argument index="return">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="addRect(const QRectF &amp;, const QPen &amp;, const QBrush &amp;)">
        <modify-argument index="return">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="addText(const QString &amp;, const QFont &amp;)">
        <modify-argument index="return">
            <disable-gc />
        </modify-argument>
    </modify-function>
  </object-type>


  <object-type name="QCalendarWidget">
    <extra-includes>
      <include file-name="QTextCharFormat" location="global"/>
    </extra-includes>
  </object-type>

  <object-type name="QTreeWidget">
    <modify-function signature="indexOfTopLevelItem(QTreeWidgetItem *)">
        <remove/>
    </modify-function>
    <modify-function signature="addTopLevelItem(QTreeWidgetItem *)">
        <modify-argument index="1">
            <disable-gc/>
        </modify-argument>
    </modify-function>
    <modify-function signature="addTopLevelItems(const QList&lt;QTreeWidgetItem*> &amp;)">
        <modify-argument index="1">
            <disable-gc/>
        </modify-argument>    
    </modify-function>    
    <modify-function signature="insertTopLevelItem(int, QTreeWidgetItem *)">
        <modify-argument index="2">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="insertTopLevelItems(int, const QList&lt;QTreeWidgetItem*> &amp;)">
        <modify-argument index="2">
            <disable-gc />
        </modify-argument>
    </modify-function>        
    <modify-function signature="setHeaderItem(QTreeWidgetItem *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>                
  </object-type>
  
  <object-type name="QAbstractItemDelegate">
    <modify-function signature="QAbstractItemDelegate(const QAbstractItemDelegate&amp;)">
        <remove/>
    </modify-function>
  </object-type>

  <object-type name="QTableWidgetItem">
    <modify-function class="shell" signature="clone() const">
        <modify-argument index="return">
            <disable-gc />
        </modify-argument>
    </modify-function>    
  </object-type>

  <object-type name="QListWidgetItem">
    <modify-function signature="QListWidgetItem(QListWidget *, int)">
        <modify-argument index="this">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="QListWidgetItem(const QString &amp;, QListWidget *, int)">
        <modify-argument index="this">
            <disable-gc />
        </modify-argument>
    </modify-function>    
    <modify-function signature="QListWidgetItem(const QIcon &amp;, const QString &amp;, QListWidget *, int)">
        <modify-argument index="this">
            <disable-gc />
        </modify-argument>    
    </modify-function>    
    <modify-function class="shell" signature="clone() const">
        <modify-argument index="return">
            <disable-gc />
        </modify-argument>
    </modify-function>
  </object-type>

  <object-type name="QGraphicsTextItem">
    <extra-includes>
      <include file-name="QTextCursor" location="global"/>
    </extra-includes>
  </object-type>

  <object-type name="QCompleter">
    <modify-function signature="activated(const QModelIndex &amp;)">
        <rename to="activatedIndex"/>
    </modify-function>
    <modify-function signature="highlighted(const QModelIndex &amp;)">
        <rename to="highlightedIndex"/>
    </modify-function>    
  </object-type>


  <object-type name="QTreeWidgetItem">
    <modify-function signature="QTreeWidgetItem(const QTreeWidgetItem &amp;)">
        <remove exclusive="yes" />
    </modify-function>
    <modify-function signature="QTreeWidgetItem(QTreeWidget *,int)">
        <modify-argument index="this">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="QTreeWidgetItem(QTreeWidget *,const QStringList&lt;QString> &amp;,int)">
        <modify-argument index="this">
            <disable-gc />
        </modify-argument>
    </modify-function>    
    <modify-function signature="QTreeWidgetItem(QTreeWidget *,QTreeWidgetItem *,int)">
        <modify-argument index="this">
            <disable-gc />
        </modify-argument>
    </modify-function>        
    <modify-function signature="QTreeWidgetItem(QTreeWidgetItem *,int)">
        <modify-argument index="this">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="QTreeWidgetItem(QTreeWidgetItem *,const QStringList&lt;QString> &amp;,int)">
        <modify-argument index="this">
            <disable-gc />
        </modify-argument>
    </modify-function>    
    <modify-function signature="QTreeWidgetItem(QTreeWidgetItem *,QTreeWidgetItem *,int)">
        <modify-argument index="this">
            <disable-gc />
        </modify-argument>    
    </modify-function>            
    <modify-function class="shell" signature="clone() const">
        <modify-argument index="return">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="addChild(QTreeWidgetItem *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="addChildren(const QList&lt;QTreeWidgetItem*> &amp;)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>    
    <modify-function signature="insertChild(int, QTreeWidgetItem *)">
        <modify-argument index="2">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="insertChildren(int, const QList&lt;QTreeWidgetItem*> &amp;)">
        <modify-argument index="2">
            <disable-gc />
        </modify-argument>
    </modify-function>        
  </object-type>

  <object-type name="QListWidget">
    <modify-function signature="addItem(QListWidgetItem *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>
    <modify-function signature="insertItem(int, QListWidgetItem *)">
        <modify-argument index="2">
            <disable-gc />
        </modify-argument>            
    </modify-function>    
  </object-type>

  <object-type name="QWidget">
    <extra-includes>
        <include file-name="QIcon" location="global"/>
    </extra-includes>          
  </object-type>


  <object-type name="QMessageBox">
    <extra-includes>
        <include file-name="QPixmap" location="global"/>
    </extra-includes>
  </object-type>

  <object-type name="QAbstractSpinBox">
  </object-type>

  <object-type name="QTextFrame">
    <extra-includes>
        <include file-name="QTextCursor" location="global"/>
    </extra-includes>              
  </object-type>

  <object-type name="QImageIOHandler">
    <extra-includes>
        <include file-name="QRect" location="global"/>
    </extra-includes>                
    <modify-function signature="setFormat(const QByteArray &amp;)const">
        <remove/>
    </modify-function>
  </object-type>
    
  <object-type name="QProxyModel">
    <extra-includes>
        <include file-name="QPixmap" location="global"/>
        <include file-name="QStringList" location="global"/>
        <include file-name="QSize" location="global"/>
    </extra-includes>              
  </object-type>

  <object-type name="QImageReader">  
    <extra-includes>
        <include file-name="QColor" location="global"/>
        <include file-name="QRect" location="global"/>
        <include file-name="QSize" location="global"/>
        <include file-name="QStringList" location="global"/>
        <include file-name="QImage" location="global"/>
    </extra-includes>              
  </object-type>
  
  <object-type name="QMovie">
    <extra-includes>
        <include file-name="QColor" location="global"/>
        <include file-name="QImage" location="global"/>
        <include file-name="QPixmap" location="global"/>
        <include file-name="QRect" location="global"/>
        <include file-name="QSize" location="global"/>
    </extra-includes>   
    <modify-function signature="cacheMode()">
        <remove />
    </modify-function>
  </object-type>
    
  <object-type name="QPageSetupDialog">
  </object-type>

  <object-type name="QTabWidget"/>
  <object-type name="QDrag">
    <extra-includes>
        <include file-name="QPoint" location="global"/>
        <include file-name="QPixmap" location="global"/>
    </extra-includes>                  
  </object-type>
  
  <object-type name="QDateTimeEdit"/>

  <object-type name="QSortFilterProxyModel">
    <extra-includes>
        <include file-name="QItemSelection" location="global"/>
        <include file-name="QStringList" location="global"/>
        <include file-name="QSize" location="global"/>
    </extra-includes>            
  </object-type>

  <object-type name="QSlider"/>

  <object-type name="QInputContext">
    <extra-includes>
        <include file-name="QTextFormat" location="global"/>
    </extra-includes>        
  </object-type>
  
    
  <object-type name="QProgressDialog">
  </object-type>

  <object-type name="QLabel">
  </object-type>

  <object-type name="QFileDialog">
  </object-type>

  <object-type name="QErrorMessage">
  </object-type>

  <object-type name="QTabBar">
    <extra-includes>
        <include file-name="QIcon" location="global"/>
    </extra-includes>        
  </object-type>

  <object-type name="QStandardItemModel">
    <extra-includes>
        <include file-name="QStringList" location="global"/>
        <include file-name="QSize" location="global"/>
    </extra-includes>        
  </object-type>

  <object-type name="QRadioButton">
  </object-type>

  <object-type name="QScrollBar">
  </object-type>

  <object-type name="QClipboard">
    <extra-includes>
        <include file-name="QImage" location="global"/>
        <include file-name="QPixmap" location="global"/>
    </extra-includes>      
  </object-type>


  <object-type name="QAbstractScrollArea">
  </object-type>

  <object-type name="QPaintEngineState">
    <extra-includes>
        <include file-name="QPainterPath" location="global"/>
    </extra-includes>        
  </object-type>

  <object-type name="QRubberBand">
  </object-type>

  <object-type name="QTextLayout">
    <extra-includes>
        <include file-name="QTextOption" location="global"/>
    </extra-includes>          
  </object-type>  

  <object-type name="QTableWidget">
    <modify-function signature="setHorizontalHeaderItem(int, QTableWidgetItem *)">
        <modify-argument index="2">
            <disable-gc/>
        </modify-argument>
    </modify-function>
    <modify-function signature="setItem(int, int, QTableWidgetItem *)">
        <modify-argument index="3">
            <disable-gc />
        </modify-argument>
    </modify-function>    
    <modify-function signature="setItemPrototype(const QTableWidgetItem *)">
        <modify-argument index="1">
            <disable-gc />
        </modify-argument>
    </modify-function>    
    <modify-function signature="setVerticalHeaderItem(int, QTableWidgetItem *)">
        <modify-argument index="2">
            <disable-gc />
        </modify-argument>
    </modify-function>    
  </object-type>

  <object-type name="QTextDocument">
    <extra-includes>
        <include file-name="QTextBlock" location="global"/>
        <include file-name="QTextFormat" location="global"/>
        <include file-name="QTextCursor" location="global"/>
    </extra-includes>  
  </object-type>

  <object-type name="QSplitter">
  </object-type>
  
  <object-type name="QGroupBox">
  </object-type>

  <object-type name="QStackedWidget">
  </object-type>

  <object-type name="QSplitterHandle">
  </object-type>

  <object-type name="QDial">
  </object-type>

  <object-type name="QLineEdit">
  </object-type>
  
  <object-type name="QLCDNumber">
  </object-type>
  
  <object-type name="QSplashScreen">
    <modify-function signature="showMessage(const QString &amp;, int, const QColor &amp;)">
      <modify-argument index="3">
        <replace-default-expression with="QColor.black"/>
      </modify-argument>
    </modify-function>
  </object-type>
  
  
  <object-type name="QDockWidget">
  </object-type>

  <object-type name="QAbstractProxyModel">
    <extra-includes>
        <include file-name="QItemSelection" location="global"/>
        <include file-name="QStringList" location="global"/>
        <include file-name="QSize" location="global"/>
    </extra-includes>
  </object-type>

  <object-type name="QDesktopWidget">
  </object-type>

  <object-type name="QFrame">
  </object-type>

  <object-type name="QTextTable">
    <modify-function signature="format() const">
        <rename to="tableFormat"/>
    </modify-function>
    <extra-includes>
        <include file-name="QTextCursor" location="global"/>
    </extra-includes>
  </object-type>

  <object-type name="QSpinBox">
    <modify-function signature="valueChanged(const QString &amp;)">
        <rename to="valueStringChanged"/>
    </modify-function>
  </object-type>
  
  <object-type name="QTextBrowser">
    <modify-function signature="highlighted(const QString &amp;)">
        <rename to="highlightedString"/>
    </modify-function>
  </object-type>
  
  <object-type name="QDoubleSpinBox">
    <modify-function signature="valueChanged(const QString &amp;)">
        <rename to="valueStringChanged"/>
    </modify-function>
  </object-type>  

  <object-type name="QButtonGroup">
    <modify-function class="java" signature="buttonClicked(int)">
        <rename to="buttonIdClicked"/>
    </modify-function>
    <modify-function class="java" signature="buttonPressed(int)">
        <rename to="buttonIdPressed"/>
    </modify-function>
    <modify-function class="java" signature="buttonReleased(int)">
        <rename to="buttonIdReleased"/>
    </modify-function>
  </object-type>
    
  <object-type name="QToolBar">
  </object-type>
  
  <object-type name="QPaintEngine">
    <extra-includes>
        <include file-name="QVarLengthArray" location="global" />
    </extra-includes>
    
    <modify-function class="java" signature="drawLines(const QLine *, int)">
        <modify-argument index="1">
            <replace-type modified-type="com.trolltech.qt.gui.QLine[]" />
            <conversion-rule>                
                jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2, 
                                                       "QLine", "com/trolltech/qt/gui/");
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <remove-argument />
            <conversion-rule>
                /* nothing */
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="drawLines(const QLine *, int)">
        <modify-argument index="1">
            <conversion-rule>
                QVarLengthArray&lt;QLine, 32> __lines;                
                int __size = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
                for (int i=0; i&lt;__size; ++i)
                    __lines.append(*(QLine *)qtjambi_to_object(__jni_env, __jni_env->GetObjectArrayElement((jobjectArray) %in, i)));
                const QLine *%out = %1 == 0 ? 0 : __lines.constData();                    
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <conversion-rule>
                int %out = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
            </conversion-rule>
        </modify-argument>        
    </modify-function>
    
    <modify-function class="java" signature="drawLines(const QLineF *, int)">
        <modify-argument index="1">
            <replace-type modified-type="com.trolltech.qt.gui.QLineF[]" />
            <conversion-rule>                
                jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2, 
                                                       "QLineF", "com/trolltech/qt/gui/");
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <remove-argument />
            <conversion-rule>
                /* nothing */
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="drawLines(const QLineF *, int)">
        <modify-argument index="1">
            <conversion-rule>
                QVarLengthArray&lt;QLineF, 32> __data;                
                int __size = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
                for (int i=0; i&lt;__size; ++i)
                    __data.append(*(QLineF *)qtjambi_to_object(__jni_env, __jni_env->GetObjectArrayElement((jobjectArray) %in, i)));
                const QLineF *%out = %1 == 0 ? 0 : __data.constData();                    
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <conversion-rule>
                int %out = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
            </conversion-rule>
        </modify-argument>        
    </modify-function>
    
    <modify-function class="java" signature="drawRects(const QRectF *, int)">
        <modify-argument index="1">
            <replace-type modified-type="com.trolltech.qt.core.QRectF[]" />
            <conversion-rule>                
                jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2, 
                                                       "QRectF", "com/trolltech/qt/core/");
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <remove-argument />
            <conversion-rule>
                /* nothing */
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="drawRects(const QRectF *, int)">
        <modify-argument index="1">
            <conversion-rule>
                QVarLengthArray&lt;QRectF, 32> __data;
                int __size = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
                for (int i=0; i&lt;__size; ++i)
                    __data.append(*(QRectF *)qtjambi_to_object(__jni_env, __jni_env->GetObjectArrayElement((jobjectArray) %in, i)));
                const QRectF *%out = %1 == 0 ? 0 : __data.constData();
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <conversion-rule>
                int %out = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
            </conversion-rule>
        </modify-argument>        
    </modify-function>
        
    <modify-function class="java" signature="drawRects(const QRect *, int)">
        <modify-argument index="1">
            <replace-type modified-type="com.trolltech.qt.core.QRect[]" />
            <conversion-rule>                
                jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2, 
                                                       "QRect", "com/trolltech/qt/core/");
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <remove-argument />
            <conversion-rule>
                /* nothing */
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="drawRects(const QRect *, int)">
        <modify-argument index="1">
            <conversion-rule>
                QVarLengthArray&lt;QRect, 32> __data;
                int __size = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
                for (int i=0; i&lt;__size; ++i)
                    __data.append(*(QRect *)qtjambi_to_object(__jni_env, __jni_env->GetObjectArrayElement((jobjectArray) %in, i)));
                const QRect *%out = %1 == 0 ? 0 : __data.constData();
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <conversion-rule>
                int %out = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
            </conversion-rule>
        </modify-argument>        
    </modify-function>
        
    <modify-function class="java" signature="drawPoints(const QPoint *, int)">
        <modify-argument index="1">
            <replace-type modified-type="com.trolltech.qt.core.QPoint[]" />
            <conversion-rule>                
                jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2, 
                                                       "QPoint", "com/trolltech/qt/core/");
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <remove-argument />
            <conversion-rule>
                /* nothing */
            </conversion-rule>
        </modify-argument>
    </modify-function>    
    <modify-function class="native" signature="drawPoints(const QPoint *, int)">
        <modify-argument index="1">
            <conversion-rule>
                QVarLengthArray&lt;QPoint, 32> __data;
                int __size = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
                for (int i=0; i&lt;__size; ++i)
                    __data.append(*(QPoint *)qtjambi_to_object(__jni_env, __jni_env->GetObjectArrayElement((jobjectArray) %in, i)));
                const QPoint *%out = %1 == 0 ? 0 : __data.constData();
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <conversion-rule>
                int %out = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
            </conversion-rule>
        </modify-argument>        
    </modify-function>
        
    <modify-function class="java" signature="drawPoints(const QPointF *, int)">
        <modify-argument index="1">
            <replace-type modified-type="com.trolltech.qt.core.QPointF[]" />
            <conversion-rule>                
                jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2, 
                                                       "QPointF", "com/trolltech/qt/core/");
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <remove-argument />
            <conversion-rule>
                /* nothing */
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="drawPoints(const QPointF *, int)">
        <modify-argument index="1">
            <conversion-rule>
                QVarLengthArray&lt;QPointF, 32> __data;
                int __size = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
                for (int i=0; i&lt;__size; ++i)
                    __data.append(*(QPointF *)qtjambi_to_object(__jni_env, __jni_env->GetObjectArrayElement((jobjectArray) %in, i)));
                const QPointF *%out = %1 == 0 ? 0 : __data.constData();
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <conversion-rule>
                int %out = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
            </conversion-rule>
        </modify-argument>        
    </modify-function>
    
    <modify-function class="java" signature="drawPolygon(const QPoint *, int, QPaintEngine::PolygonDrawMode)">
        <modify-argument index="1">
            <replace-type modified-type="com.trolltech.qt.core.QPoint[]" />
            <conversion-rule>                
                jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2, 
                                                       "QPoint", "com/trolltech/qt/core/");
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <remove-argument />
            <conversion-rule>
                /* nothing */
            </conversion-rule>
        </modify-argument>
    </modify-function>    
    <modify-function class="native" signature="drawPolygon(const QPoint *, int, QPaintEngine::PolygonDrawMode)">
        <modify-argument index="1">
            <conversion-rule>
                QVarLengthArray&lt;QPoint, 32> __data;
                int __size = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
                for (int i=0; i&lt;__size; ++i)
                    __data.append(*(QPoint *)qtjambi_to_object(__jni_env, __jni_env->GetObjectArrayElement((jobjectArray) %in, i)));
                const QPoint *%out = %1 == 0 ? 0 : __data.constData();
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <conversion-rule>
                int %out = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
            </conversion-rule>
        </modify-argument>        
    </modify-function>
        
    <modify-function class="java" signature="drawPolygon(const QPointF *, int, QPaintEngine::PolygonDrawMode)">
        <modify-argument index="1">
            <replace-type modified-type="com.trolltech.qt.core.QPointF[]" />
            <conversion-rule>                
                jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2, 
                                                       "QPointF", "com/trolltech/qt/core/");
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <remove-argument />
            <conversion-rule>
                /* nothing */
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function class="native" signature="drawPolygon(const QPointF *, int, QPaintEngine::PolygonDrawMode)">
        <modify-argument index="1">
            <conversion-rule>
                QVarLengthArray&lt;QPointF, 32> __data;
                int __size = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
                for (int i=0; i&lt;__size; ++i)
                    __data.append(*(QPointF *)qtjambi_to_object(__jni_env, __jni_env->GetObjectArrayElement((jobjectArray) %in, i)));
                const QPointF *%out = %1 == 0 ? 0 : __data.constData();
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <conversion-rule>
                int %out = %1 == 0 ? 0 : __jni_env->GetArrayLength((jarray) %1);
            </conversion-rule>
        </modify-argument>        
    </modify-function>
  </object-type>
  
  <object-type name="QAbstractTableModel">
    <extra-includes>
        <include file-name="QStringList" location="global"/>
        <include file-name="QSize" location="global"/>
    </extra-includes>  
  </object-type>
  
  <object-type name="QMimeData">
    <extra-includes>
        <include file-name="QStringList" location="global"/>
        <include file-name="QUrl" location="global"/>
    </extra-includes>
  </object-type>
  
  <object-type name="QComboBox">
    <modify-function class="java" signature="activated(int)">>
        <rename to="activatedIndex"/>        
    </modify-function>
    <modify-function class="java" signature="currentIndexChanged(const QString &amp;)">
        <rename to="currentStringChanged"/>
    </modify-function>
    <modify-function class="java" signature="highlighted(int)">
        <rename to="highlightedIndex"/>
    </modify-function>
  </object-type>  
 
  <object-type name="QTextEdit">
    <extra-includes>
        <include file-name="QTextCursor" location="global"/>
    </extra-includes>
  </object-type>
  
    
  <object-type name="QPrinter" memory-managed="yes">
    <custom-constructor>
        return (void *) copy;
    </custom-constructor>
    <custom-destructor>
        Q_UNUSED(copy);
    </custom-destructor>
  </object-type>

  <object-type name="QAction">
    <inject-code class="java">
    public void setShortcut(String str) { setShortcut(new QKeySequence(str)); }
    public void setIcon(QPixmap pm) { setIcon(new QIcon(pm)); }
    </inject-code>
  </object-type>

  <object-type name="QPainter">
    <extra-includes>
      <include file-name="QWidget" location="global"/>
      <include file-name="QPainterPath" location="global"/>
      <include file-name="QPixmap" location="global"/>
    </extra-includes>
    <inject-code class="java">
    public void setBrush(QColor color) { setBrush(new QBrush(color)); }
    public void setBrush(QGradient gradient) { setBrush(new QBrush(gradient)); }
    public void setBrush(QPixmap pm) { setBrush(new QBrush(pm)); }
    </inject-code>
    <modify-function class="java" signature="drawConvexPolygon(const QPoint *, int)">
        <remove />
    </modify-function>
    <modify-function class="java" signature="drawConvexPolygon(const QPointF *, int)">
        <remove />
    </modify-function>    
    <modify-function class="java" signature="drawLines(const QLine *, int)">
        <remove />
    </modify-function>    
    <modify-function class="java" signature="drawLines(const QLineF *, int)">
        <remove />
    </modify-function>
    <modify-function class="java" signature="drawLines(const QPoint *, int)">
        <remove />
    </modify-function>
    <modify-function class="java" signature="drawLines(const QPointF *, int)">
        <remove />
    </modify-function>
    <modify-function class="java" signature="drawPoints(const QPoint *, int)">
        <remove />
    </modify-function>
    <modify-function class="java" signature="drawPoints(const QPointF *, int)">
        <remove />
    </modify-function>    
    <modify-function class="java" signature="drawPolygon(const QPoint *, int, Qt::FillRule)">
        <remove />
    </modify-function>
    <modify-function class="java" signature="drawPolygon(const QPointF *, int, Qt::FillRule)">
        <remove />
    </modify-function>    
    <modify-function class="java" signature="drawPolyline(const QPoint *, int)">
        <remove />
    </modify-function>
    <modify-function class="java" signature="drawPolyline(const QPointF *, int)">
        <remove />
    </modify-function>    
    <modify-function class="java" signature="drawRects(const QRect *, int)">
        <remove />
    </modify-function>
    <modify-function class="java" signature="drawRects(const QRectF *, int)">
        <remove />
    </modify-function>    
    <modify-function class="java" signature="drawLines(const QVector&lt;QPoint> &amp;)">
        <rename to="drawLinesFromPoints"/>
    </modify-function>    
    <modify-function class="java" signature="drawLines(const QVector&lt;QPointF> &amp;)">
        <rename to="drawLinesFromPointsF"/>
    </modify-function>
    <modify-function class="java" signature="drawLines(const QVector&lt;QLineF> &amp;)">
        <rename to="drawLinesF"/>
    </modify-function>
    <modify-function class="java" signature="drawRects(const QVector&lt;QRectF> &amp;)">
        <rename to="drawRectsF"/>
    </modify-function>    
    <inject-code>
    public QPainter(QWidget widget) {
        this();
        begin(widget);  
    }

    public boolean begin(QWidget widget) {
        return com.trolltech.qt.QtJambiInternal.beginPaint(widget, this);
    }
    </inject-code>
  </object-type>  
    
  <object-type name="QApplication" memory-managed="yes">
    <extra-includes>
      <include file-name="QBasicTimer" location="global"/>
      <include file-name="qtjambi_cache.h" location="local"/>
      <include file-name="QFont" location="global"/>
      <include file-name="QFontMetrics" location="global"/>
      <include file-name="QPalette" location="global"/>
      <include file-name="QIcon" location="global"/>
      <include file-name="QLocale" location="global"/>
    </extra-includes>  
    <inject-code class="java">
    public static void initialize(String args[])
    {
        if (m_instance != null)
            throw new RuntimeException("QApplication can only be initialized once");
            
        m_instance = new QApplication(args);
    }
    
    public static void aboutQtJambi() {
        com.trolltech.qt.QtJambiInternal.aboutQtJambi();
    }

    public static QApplication instance() {
        if (type() != Type.Tty)
            return (QApplication) com.trolltech.qt.core.QCoreApplication.instance();
        return null;
    }
    </inject-code>
    <inject-code class="java">
    public QApplication(String args[])         
    {
        this(argc(args), argv(args));        
    }
    </inject-code>
    <modify-function class="java" signature="QApplication(int &amp;, char  **, int)">
      <access modifier="private"/>
    </modify-function>    
    <modify-function class="shell" signature="notify(QObject *, QEvent *)"> 
        <inject-code class="shell">        
        <argument-map position="2" meta-name="event"/>
	if (event->type() == 512) {
            qtjambi_metacall(0, event);
            return true;
        }
        </inject-code>
    </modify-function>
    <modify-function class="java" signature="QApplication(int &amp;, char **, QApplication::Type, int)">
	<remove/>
    </modify-function>
    <modify-function class="java" signature="QApplication(int &amp;, char **, bool, int)">
	<remove/>
    </modify-function>
  </object-type>

  <suppress-warning text="WARNING(MetaJavaBuilder) :: type '*' is specified in typesystem, but not declared" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type '*Private&amp;'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type '*Private\*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type '*Private const\*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QTextEngine\*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QFontEngine\*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QPixmap::Type'" />  
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QInputDialog::Type'" />  
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QTextFrameLayoutData\*'" />  
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QAbstractUndoItem\*'"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type '*QImageTextKeyLang*'"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: non-public function '*' in interface '*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: visibility of function '*' modified in class '*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: hiding of function '*' in class '*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: unsupported default value 'QVector&lt;FormatRange&gt;()' of argument in function '*', class '*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: unsupported default value 'QVariantList()' of argument in function '*', class '*'" />  
  <suppress-warning text="WARNING(CppImplGenerator) :: protected function '*' in final class '*'" />  
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QTextLayout::QTextLayout', unmatched parameter type 'QTextEngine*'" />    
  <suppress-warning text="WARNING(MetaJavaBuilder) :: unsupported default value of argument in function 'doAction', class 'QAccessibleInterface'" />  
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QFileDialog::QFileDialog', unmatched parameter type 'QFileDialogArgs const&amp;'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: unsupported default value '0., 0., 1000000000., 1000000000.' of argument in function 'update', class 'QAbstractTextDocumentLayout'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QWidget::windowSurface', unmatched return type 'QWindowSurface*'"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QWidget::setWindowSurface', unmatched parameter type 'QWindowSurface*'"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: enum 'QStyleOption::StyleOptionType' does not have a type entry or is not an enum"/>
  
</typesystem>
