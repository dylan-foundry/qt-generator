<typesystem package="com.trolltech.qt.core" default-superclass="com.trolltech.qt.QtObject">
  <inject-code>
    com.trolltech.qt.Utilities.loadQtLibrary("QtCore");
    com.trolltech.qt.Utilities.loadQtLibrary("QtGui");
  </inject-code>

  <rejection class="*" function-name="d_func"/>

  <rejection class="*" field-name="d_ptr"/>
  <rejection class="*" field-name="d"/>
  
  <rejection class="QAlgorithmsPrivate"/>
  <rejection class="QAtomic"/>
  <rejection class="QAtomicPointer"/>
  <rejection class="QBasicAtomic"/>
  <rejection class="QBasicAtomicPointer"/>
  <rejection class="QBitRef"/>
  <rejection class="QCache"/>
  <rejection class="QCharRef"/>
  <rejection class="QDebug"/>
  <rejection class="QFactoryInterface"/>
  <rejection class="QFlag"/>
  <rejection class="QFlags"/>
  <rejection class="QForeachContainer"/>
  <rejection class="QForeachContainerBase"/>
  <rejection class="QGlobalStatic"/>
  <rejection class="QHash"/>
  <rejection class="QHashData"/>
  <rejection class="QHashDummyNode"/>
  <rejection class="QHashDummyNode"/>
  <rejection class="QHashDummyNode"/>
  <rejection class="QHashDummyNode"/>
  <rejection class="QHashDummyNode"/>
  <rejection class="QHashDummyValue"/>
  <rejection class="QHashIterator"/>
  <rejection class="QHashNode"/>
  <rejection class="QHashNode"/>
  <rejection class="QHashNode"/>
  <rejection class="QHashNode"/>
  <rejection class="QHashNode"/>
  <rejection class="QInternal"/>
  <rejection class="QLibrary"/>
  <rejection class="QLinkedList"/>
  <rejection class="QLinkedListData"/>
  <rejection class="QLinkedListIterator"/>
  <rejection class="QLinkedListNode"/>
  <rejection class="QListData"/>
  <rejection class="QListIterator"/>
  <rejection class="QMap"/>
  <rejection class="QMapData"/>
  <rejection class="QMapIterator"/>
  <rejection class="QMetaType"/>
  <rejection class="QMetaTypeId"/>
  <rejection class="QMultiHash"/>
  <rejection class="QMultiMap"/>
  <rejection class="QMutableHashIterator"/>
  <rejection class="QMutableLinkedListIterator"/>
  <rejection class="QMutableListIterator"/>
  <rejection class="QMutableMapIterator"/>
  <rejection class="QMutableVectorIterator"/>
  <rejection class="QMutexLocker"/>
  <rejection class="QNoImplicitBoolCast"/>
  <rejection class="QObjectCleanupHandler"/>
  <rejection class="QObjectData"/>
  <rejection class="QObjectUserData"/>
  <rejection class="QPluginLoader"/>
  <rejection class="QPointer"/>
  <rejection class="QReadLocker"/>
  <rejection class="QResource" />
  <rejection class="QSet"/>
  <rejection class="QSetIterator"/>
  <rejection class="QSharedData"/>
  <rejection class="QSharedDataPointer"/>
  <rejection class="QStack"/>
  <rejection class="QSysInfo"/>
  <rejection class="QTextStreamManipulator"/>    
  <rejection class="QThreadStorage"/>
  <rejection class="QThreadStorageData"/>
  <rejection class="QTypeInfo"/>
  <rejection class="QTypeInfo"/>
  <rejection class="QVFbKeyData"/>
  <rejection class="QVariantComparisonHelper"/>
  <rejection class="QVectorData"/>
  <rejection class="QVectorIterator"/>  
  <rejection class="QVectorTypedData"/>
  <rejection class="QWriteLocker"/>
  <rejection class="QtPrivate"/>
  <rejection class="qGreater"/>
  <rejection class="qLess"/>
  <rejection class="std"/>


  <rejection class="QAbstractEventDispatcher" function-name="filterEvent"/>
  <rejection class="QAbstractEventDispatcher" function-name="setEventFilter"/>
  <rejection class="QAbstractFileEngine" function-name="beginEntryList"/>
  <rejection class="QAbstractFileEngine" function-name="endEntryList"/>
  <rejection class="QAbstractFileEngine" function-name="extension"/>
  <rejection class="QCoreApplication" function-name="compressEvent"/>
  <rejection class="QCoreApplication" function-name="eventFilter"/>
  <rejection class="QCoreApplication" function-name="filterEvent"/>
  <rejection class="QCoreApplication" function-name="setEventFilter"/>
  <rejection class="QFile" function-name="setDecodingFunction"/>
  <rejection class="QFile" function-name="setEncodingFunction"/>
  <rejection class="QList" function-name="begin"/>
  <rejection class="QList" function-name="constBegin"/>
  <rejection class="QList" function-name="constEnd"/>
  <rejection class="QList" function-name="end"/>
  <rejection class="QList" function-name="erase"/>
  <rejection class="QList" function-name="erase"/>
  <rejection class="QList" function-name="free"/>
  <rejection class="QList" function-name="fromList"/>
  <rejection class="QList" function-name="fromSet"/>
  <rejection class="QList" function-name="fromSet"/>
  <rejection class="QList" function-name="insert"/>
  <rejection class="QList" function-name="malloc"/>
  <rejection class="QList" function-name="node_construct"/>
  <rejection class="QList" function-name="node_copy"/>
  <rejection class="QList" function-name="node_destruct"/>
  <rejection class="QList" function-name="toSet"/>
  <rejection class="QObject" function-name="receivers"/>
  <rejection class="QObject" function-name="findChild"/>   
  <rejection class="QObject" function-name="findChildren"/>
  <rejection class="QObject" function-name="setUserData"/>
  <rejection class="QObject" function-name="userData"/>
  <rejection class="QObject" function-name="destroyed"/>
  <rejection class="QObject" function-name="connect"/>
  <rejection class="QObject" function-name="disconnect"/>
  <rejection class="QObject" function-name="registerUserData"/>
  <rejection class="QObject" function-name="sender"/>
  <rejection class="QTimer" function-name="singleShot"/>
  <rejection class="QProcess" function-name="pid"/>
  <rejection class="QRegion" function-name="cleanUp"/>
  <rejection class="QSettings" function-name="registerFormat"/>
  <rejection class="QVector" function-name="back"/>
  <rejection class="QVector" function-name="begin"/>
  <rejection class="QVector" function-name="constBegin"/>
  <rejection class="QVector" function-name="constEnd"/>
  <rejection class="QVector" function-name="end"/>
  <rejection class="QVector" function-name="erase"/>
  <rejection class="QVector" function-name="free"/>
  <rejection class="QVector" function-name="front"/>
  <rejection class="QVector" function-name="insert"/>
  <rejection class="QVector" function-name="malloc"/>
  <rejection class="QVector" function-name="operator+="/>

  <namespace-type name="Qt"/>

  <primitive-type name="bool" java-name="boolean" jni-name="jboolean"/>
  
  <primitive-type name="double" jni-name="jdouble"/>
  <primitive-type name="qreal" java-name="double" preferred-conversion="no" jni-name="jdouble" />
  
  <primitive-type name="float" jni-name="jfloat"/>  
  
  <primitive-type name="qint64" java-name="long" jni-name="jlong"/>
  <primitive-type name="__int64" java-name="long" preferred-conversion="no" jni-name="jlong"/>
  <primitive-type name="unsigned __int64" java-name="long" preferred-conversion="no" jni-name="jlong"/>
  <primitive-type name="unsigned long long" java-name="long" preferred-conversion="no" jni-name="jlong"/>
  <primitive-type name="long long" java-name="long" preferred-conversion="no" jni-name="jlong"/>
  <primitive-type name="qlonglong" preferred-conversion="no" java-name="long" jni-name="jlong"/>
  <primitive-type name="qulonglong" preferred-conversion="no" java-name="long" jni-name="jlong"/>
        
  <primitive-type name="short" preferred-conversion="no" java-name="char" jni-name="jchar"/>
  <primitive-type name="signed short" java-name="char" preferred-conversion="no" jni-name="jchar"/>
  <primitive-type name="ushort" java-name="char" jni-name="jchar"/>
  <primitive-type name="unsigned short" java-name="char" preferred-conversion="no" jni-name="jchar"/>
  
  <primitive-type name="char" java-name="byte" jni-name="jbyte"/>
  <primitive-type name="signed char" java-name="byte" preferred-conversion="no" jni-name="jbyte" />  
  <primitive-type name="uchar" java-name="byte" preferred-conversion="no" jni-name="jbyte"/>
  <primitive-type name="unsigned char" java-name="byte" preferred-conversion="no" jni-name="jbyte"/>  
  
  <primitive-type name="int" jni-name="jint"/>
  <primitive-type name="signed int" java-name="int" preferred-conversion="no" jni-name="jint"/>
  <primitive-type name="uint" java-name="int" preferred-conversion="no" jni-name="jint"/>
  <primitive-type name="ulong" java-name="int" preferred-conversion="no" jni-name="jint"/>
  <primitive-type name="unsigned int" java-name="int" preferred-conversion="no" jni-name="jint"/>
  <primitive-type name="signed long" java-name="int" preferred-conversion="no" jni-name="jint"/>  
  <primitive-type name="long" java-name="int" preferred-conversion="no" jni-name="jint"/>
  <primitive-type name="unsigned long" java-name="int" preferred-conversion="no" jni-name="jint"/>  

  <primitive-type name="WId" java-name="long" preferred-conversion="no" jni-name="jlong"/>
  <primitive-type name="Qt::HANDLE" java-name="long" preferred-conversion="no" jni-name="jlong"/>
  <primitive-type name="QVariant::Type" java-name="int" preferred-conversion="no" jni-name="jint"/>

  <primitive-type name="QByteRef" java-name="byte" preferred-conversion="no" jni-name="jbyte"/>
  <primitive-type name="QBitRef" java-name="boolean" preferred-conversion="no" jni-name="jboolean"/>

  <primitive-type name="QBool" java-name="boolean" preferred-conversion="no" jni-name="bool">
    <custom-constructor>
        return new QBool(((const void *) *copy) != 0);
    </custom-constructor>
    <custom-destructor>
        delete copy;
    </custom-destructor>
  </primitive-type>   
            
  <enum-type name="Qt::enum_1"/>
  <enum-type name="Qt::enum_2"/>

  <enum-type name="QAbstractFileEngine::Extension" extensible="yes"/>
  <enum-type name="QAbstractFileEngine::FileFlag" flags="QAbstractFileEngine::FileFlags"/>
  <enum-type name="QAbstractFileEngine::FileName"/>
  <enum-type name="QAbstractFileEngine::FileOwner"/>
  <enum-type name="QAbstractFileEngine::FileTime"/>
  <enum-type name="QDataStream::Status"/>
  <enum-type name="QDir::Filter" flags="QDir::Filters"/>
  <enum-type name="QDirModel::Roles"/>
  <enum-type name="QEvent::Type" extensible="yes"/>
  <enum-type name="QEventLoop::ProcessEventsFlag" flags="QEventLoop::ProcessEventsFlags"/>
  <enum-type name="QFile::FileError"/>
  <enum-type name="QFile::Permission" flags="QFile::Permissions"/>
  <enum-type name="QFileInfo::Permission" flags="QFileInfo::Permissions"/>
  <enum-type name="QIODevice::OpenModeFlag" flags="QIODevice::OpenMode"/>
  <enum-type name="QLibraryInfo::LibraryLocation"/>
  <enum-type name="QLocale::FormatType"/>
  <enum-type name="QLocale::NumberOption" flags="QLocale::NumberOptions"/>
  <enum-type name="QMetaMethod::Access"/>
  <enum-type name="QMetaMethod::Attributes"/>
  <enum-type name="QMetaMethod::MethodType"/>
  <enum-type name="QMetaType::Type"/>
  <enum-type name="QMutex::RecursionMode"/>
  <enum-type name="QProcess::ExitStatus"/>
  <enum-type name="QProcess::ProcessChannel"/>
  <enum-type name="QProcess::ProcessChannelMode"/>
  <enum-type name="QProcess::ProcessError"/>
  <enum-type name="QProcess::ProcessState"/>
  <enum-type name="QRegExp::CaretMode"/>
  <enum-type name="QRegExp::PatternSyntax"/>
  <enum-type name="QSettings::Format"/>
  <enum-type name="QSettings::Scope"/>
  <enum-type name="QSettings::Status"/>
  <enum-type name="QSocketNotifier::Type"/>
  <enum-type name="QString::SectionFlag" flags="QString::SectionFlags"/>
  <enum-type name="QSystemLocale::QueryType"/>
  <enum-type name="QTextCodec::ConversionFlag" flags="QTextCodec::ConversionFlags"/>
  <enum-type name="QTextStream::FieldAlignment"/>
  <enum-type name="QTextStream::NumberFlag" flags="QTextStream::NumberFlags"/>
  <enum-type name="QTextStream::RealNumberNotation"/>
  <enum-type name="QTextStream::Status"/>
  <enum-type name="QTimeLine::CurveShape"/>
  <enum-type name="QTimeLine::Direction"/>
  <enum-type name="QTimeLine::State"/>
  <enum-type name="QUrl::FormattingOption" flags="QUrl::FormattingOptions"/>
  <enum-type name="QUrl::ParsingMode"/>
  <enum-type name="QUuid::Variant"/>
  <enum-type name="QUuid::Version"/>
  <enum-type name="Qt::AnchorAttribute"/>
  <enum-type name="Qt::ApplicationAttribute"/>
  <enum-type name="Qt::ArrowType"/>
  <enum-type name="Qt::AspectRatioMode"/>
  <enum-type name="Qt::BGMode"/>
  <enum-type name="Qt::BrushStyle"/>
  <enum-type name="Qt::CaseSensitivity"/>
  <enum-type name="Qt::CheckState"/>
  <enum-type name="Qt::ClipOperation"/>
  <enum-type name="Qt::ConnectionType"/>
  <enum-type name="Qt::ContextMenuPolicy"/>
  <enum-type name="Qt::Corner"/>
  <enum-type name="Qt::DayOfWeek"/>
  <enum-type name="Qt::DockWidgetAreaSizes"/>
  <enum-type name="Qt::DropAction" flags="Qt::DropActions"/>
  <enum-type name="Qt::FillRule"/>
  <enum-type name="Qt::FocusPolicy"/>
  <enum-type name="Qt::FocusReason"/>
  <enum-type name="Qt::GlobalColor"/>
  <enum-type name="Qt::HitTestAccuracy"/>
  <enum-type name="Qt::InputMethodQuery"/>
  <enum-type name="Qt::ItemFlag" flags="Qt::ItemFlags"/>
  <enum-type name="Qt::ItemSelectionMode"/>
  <enum-type name="Qt::KeyboardModifier" flags="Qt::KeyboardModifiers"/>
  <enum-type name="Qt::LayoutDirection"/>
  <enum-type name="Qt::MatchFlag" flags="Qt::MatchFlags"/>
  <enum-type name="Qt::Modifier"/>
  <enum-type name="Qt::MouseButton" flags="Qt::MouseButtons"/>
  <enum-type name="Qt::Orientation" flags="Qt::Orientations"/>
  <enum-type name="Qt::PenCapStyle"/>
  <enum-type name="Qt::PenJoinStyle"/>
  <enum-type name="Qt::PenStyle"/>
  <enum-type name="Qt::ScrollBarPolicy"/>
  <enum-type name="Qt::ShortcutContext"/>
  <enum-type name="Qt::SortOrder"/>
  <enum-type name="Qt::TextElideMode"/>
  <enum-type name="Qt::TextFlag"/>
  <enum-type name="Qt::TextFormat"/>
  <enum-type name="Qt::TextInteractionFlag" flags="Qt::TextInteractionFlags"/>
  <enum-type name="Qt::TimeSpec"/>
  <enum-type name="Qt::ToolBarAreaSizes"/>
  <enum-type name="Qt::ToolButtonStyle"/>
  <enum-type name="Qt::TransformationMode"/>
  <enum-type name="Qt::UIEffect"/>
  <enum-type name="Qt::WhiteSpaceMode"/>
  <enum-type name="Qt::WindowModality"/>
  <enum-type name="Qt::WindowState" flags="Qt::WindowStates"/>
  <enum-type name="Qt::WindowType" flags="Qt::WindowFlags"/>

  <enum-type name="QCoreApplication::Encoding">
    <reject-enum-value name="DefaultCodec"/>
  </enum-type>

  <enum-type name="Qt::AlignmentFlag" flags="Qt::Alignment">
    <reject-enum-value name="AlignLeading"/>
    <reject-enum-value name="AlignTrailing"/>
  </enum-type>

  <enum-type name="Qt::CursorShape">
    <reject-enum-value name="LastCursor"/>
  </enum-type>

  <enum-type name="Qt::DateFormat">
    <reject-enum-value name="LocalDate"/>
  </enum-type>


  <enum-type name="Qt::ItemDataRole" force-integer="yes">
    <reject-enum-value name="BackgroundColorRole"/>
    <reject-enum-value name="TextColorRole"/>
  </enum-type>


  <enum-type name="QDataStream::Version">
    <reject-enum-value name="Qt_4_1"/>
  </enum-type>

  <enum-type name="QDir::SortFlag" flags="QDir::SortFlags">
    <reject-enum-value name="Unsorted"/>
  </enum-type>

  <enum-type name="Qt::DockWidgetArea" flags="Qt::DockWidgetAreas">
    <reject-enum-value name="AllDockWidgetAreas"/>
  </enum-type>

  <enum-type name="Qt::ImageConversionFlag" flags="Qt::ImageConversionFlags">
    <reject-enum-value name="AutoDither"/>
    <reject-enum-value name="ColorOnly"/>
    <reject-enum-value name="DiffuseDither"/>
    <reject-enum-value name="NoAlpha"/>
    <reject-enum-value name="ThresholdAlphaDither"/>
  </enum-type>

  <enum-type name="Qt::Key">
    <reject-enum-value name="Key_Any"/>
  </enum-type>

  <enum-type name="QLocale::Language">
    <reject-enum-value name="LastLanguage"/>
  </enum-type>

  <enum-type name="QLocale::Country">
    <reject-enum-value name="LastCountry"/>
  </enum-type>

  <enum-type name="Qt::ToolBarArea" flags="Qt::ToolBarAreas">
    <reject-enum-value name="AllToolBarAreas"/>
  </enum-type>
  
  <enum-type name="Qt::WidgetAttribute">
    <reject-enum-value name="WA_ForceAcceptDrops"/>
    <reject-enum-value name="WA_NoBackground"/>
  </enum-type>
  
  <value-type name="QBasicTimer"/>
  <value-type name="QBitArray"/>
  <value-type name="QByteArrayMatcher"/>
  <value-type name="QDate"/>
  <value-type name="QDateTime"/>
  <value-type name="QDir">
    <modify-function signature="QDir(QString,QString,QFlags&lt;QDir::SortFlag&gt;,QFlags&lt;QDir::Filter&gt;)">
        <replace-default-expression index="2" with="Name | IgnoreCase" />
    </modify-function>  
  </value-type>
  <value-type name="QLocale"/>  
  <value-type name="QMetaEnum"/>
  <value-type name="QPoint"/>
  <value-type name="QPointF"/>
  <value-type name="QRect"/>
  <value-type name="QRectF"/>
  <value-type name="QSize"/>
  <value-type name="QSizeF"/>
  <value-type name="QStringMatcher"/>
  <value-type name="QTime"/>  
  <value-type name="QPersistentModelIndex"/>
  <value-type name="QUuid"/>

  <object-type name="QAbstractItemModel">
    <extra-includes>
        <include file-name="QStringList" location="global"/>
        <include file-name="QSize" location="global"/>
    </extra-includes>  
    <modify-function signature="match(QModelIndex,int,QVariant,int,QFlags&lt;Qt::MatchFlag&gt;)const">
        <replace-default-expression index="4" with="Qt.MatchStartsWith | Qt.MatchWrap" />         
    </modify-function>
    <inject-code class="java">
    private native boolean setData_native(long id, int row, int col, Object value, int role);
    public boolean setData(int row, int col, Object value) {
        return setData_native(nativeId(), row, col, value, com.trolltech.qt.core.Qt.ItemDataRole.DisplayRole);
    }
    public boolean setData(int row, int col, Object value, int role) {
        return setData_native(nativeId(), row, col, value, role);
    }
    private native Object data_native(long id, int row, int col, int role);
    public Object data(int row, int col, int role) {
        return data_native(nativeId(), row, col, role);
    }
    public Object data(int row, int col) {
        return data_native(nativeId(), row, col, Qt.ItemDataRole.DisplayRole);
    }
    
    </inject-code>
    <inject-code class="native">
    extern "C" JNIEXPORT jint Java_com_trolltech_qt_core_QAbstractItemModel_setData_1native
    (JNIEnv *__jni_env,
     jobject,
     int __this_nativeId,
     int row, int col, jobject value, int role)
    {
        QtJambiShell_QAbstractItemModel *__qt_this =
            (QtJambiShell_QAbstractItemModel *) qtjambi_from_jlong(__this_nativeId);
        QVariant qt_value = qtjambi_to_qvariant(__jni_env, value);
    
        QModelIndex index = __qt_this->index(row, col, QModelIndex());
        return __qt_this->setData(index, qt_value, role);
    }

    extern "C" JNIEXPORT jobject Java_com_trolltech_qt_core_QAbstractItemModel_data_1native
    (JNIEnv *__jni_env,
     jobject,
     int __this_nativeId,
     int row, int col, int role)
    {
        QtJambiShell_QAbstractItemModel *__qt_this =
            (QtJambiShell_QAbstractItemModel *) qtjambi_from_jlong(__this_nativeId);
    
        QModelIndex index = __qt_this->index(row, col, QModelIndex());
        return qtjambi_from_qvariant(__jni_env, __qt_this->data(index, role));
    }
    </inject-code>
  </object-type>
  
  <object-type name="QAbstractListModel">
    <extra-includes>
        <include file-name="QStringList" location="global"/>
        <include file-name="QSize" location="global"/>
    </extra-includes>
  </object-type>
  
  <value-type name="QUrl">
    <extra-includes>
        <include file-name="QStringList" location="global"/>
    </extra-includes>
  </value-type>
  
  <value-type name="QRegExp">
    <extra-includes>
        <include file-name="QStringList" location="global"/>
    </extra-includes>
  </value-type>

  <value-type name="QFileInfo">
    <extra-includes>
        <include file-name="QDateTime" location="global"/>
        <include file-name="QDir" location="global"/>
    </extra-includes>
  </value-type>
  
  <value-type name="QByteArray">
    <inject-code class="java">
        public QByteArray(String s) 
        {
            this();         
            append(s);                        
        }

        public String toString() {
            return com.trolltech.qt.QVariant.toString(this);
        }

    </inject-code> 
    <extra-includes>
        <include file-name="QNoImplicitBoolCast" location="global"/>
    </extra-includes>
    <modify-function signature="operator const void *()const">
        <remove />
    </modify-function>
    <modify-function signature="operator const char *()const">
        <remove />
    </modify-function>    
  </value-type>

  <object-type name="QAbstractEventDispatcher"/>  
  <object-type name="QBuffer"/>
  <object-type name="QChildEvent"/>
  <object-type name="QDynamicPropertyChangeEvent"/>
  <object-type name="QEventLoop"/>
  <object-type name="QFile" memory-managed="yes"/>
  <object-type name="QIODevice"/>
  <object-type name="QLibraryInfo"/>
  <object-type name="QMetaClassInfo"/>  
  <object-type name="QMetaMethod"/>
  <object-type name="QMetaProperty"/>
  <object-type name="QMetaType"/>    
  <object-type name="QMutex"/>  
  <object-type name="QSemaphore"/>
  <object-type name="QSocketNotifier"/>
  <object-type name="QSystemLocale"/>
  <object-type name="QTemporaryFile" memory-managed="yes" />
  <object-type name="QTextCodec"/>  
  <object-type name="QTextCodecFactoryInterface"/>
  <object-type name="QTextCodecPlugin"/>  
  <object-type name="QTextDecoder"/>
  <object-type name="QTextEncoder"/>
  <object-type name="QTimeLine"/> 
  <object-type name="QTimerEvent"/>
  <object-type name="QTranslator"/>
  <object-type name="QWaitCondition"/>

  <object-type name="QFileSystemWatcher">
    <extra-includes>
      <include file-name="QStringList" location="global"/>
    </extra-includes>
  </object-type>
  
  <object-type name="QTextCodec::ConverterState">
    <include file-name="QTextCodec" location="global"/>
    <modify-function signature="ConverterState(QFlags&lt;QTextCodec::ConversionFlag&gt;)">
        <replace-default-expression index="0" />         
    </modify-function>    
  </object-type>
  
  <object-type name="QTimer">
    <inject-code class="java">
        static private class QSingleShotTimer extends QObject
        {
            private int timerId = -1;
            public Signal0 timeout;
            
            public QSingleShotTimer(int msec, QObject obj, String method)
            {
                timeout.connect(obj, method);
                timerId = startTimer(msec);
            }
            
            protected void disposed()
            {
                if (timerId &gt; 0)
                    killTimer(timerId);
                super.disposed();
            }
            
            protected void timerEvent(QTimerEvent e)
            {
                if (timerId &gt; 0)
                    killTimer(timerId);
                timerId = -1;
                timeout.emit();
                dispose();
            }
            
        }
    
        public static void singleShot(int msec, QObject obj, String method)
        {
            new QSingleShotTimer(msec, obj, method);
        }
    </inject-code>
  </object-type>

  <object-type name="QAbstractFileEngineHandler">
    <modify-function class="shell" signature="create(const QString &amp;) const">
        <disable-gc argument="return" />
    </modify-function>
  </object-type>
  
  <object-type name="QAbstractFileEngine">
    <extra-includes>
        <include file-name="QDateTime" location="global"/>
    </extra-includes>
  </object-type>
  
  <object-type name="QProcess">
    <modify-function signature="finished(int, QProcess::ExitStatus)">
        <rename to="finishedWithStatusCode" />
    </modify-function>
  </object-type>
  
  <object-type name="QSignalMapper">
    <modify-function signature="mapped(const QString &amp;)">
        <rename to="mappedString"/>
    </modify-function>
    <modify-function signature="mapped(int)">
        <rename to="mappedInteger"/>
    </modify-function>    
    <modify-function signature="mapped(QObject *)">
        <rename to="mappedQObject"/>
    </modify-function>    
    <modify-function signature="mapped(QWidget *)">
        <rename to="mappedQWidget"/>
    </modify-function>
  </object-type>  
  
  <object-type name="QObject">
    <modify-function signature="deleteLater()">
        <rename to="disposeLater"/>
    </modify-function>
    
    <extra-includes>
        <include file-name="QVarLengthArray" location="global"/>
    </extra-includes>
    
    <modify-function class="java" signature="connectNotify(const char *)"> 
        <access modifier="private" />
    </modify-function>
    
    <modify-function class="java" signature="disconnectNotify(const char *)"> 
        <access modifier="private" />
    </modify-function>
            
    <inject-code class="java">
    private static QObject m_currentSender = null;    
    { 
        com.trolltech.qt.QtJambiInternal.initializeSignals(this); // constructs objects for all signals 
    }

    public abstract class AbstractSignal extends com.trolltech.qt.QtJambiInternal.InternalSignal {
        int m_cpp_connections = 0;
        
        @Override                   
        protected final QObject qobject() {
            return QObject.this;
        }
        
        @Override
        protected final void initSignals() {
            __qt_signalInitialization(name());
        }       
        
        @Override
        protected final void emit_helper(Object ... args) {
            m_currentSender = QObject.this;
            super.emit_helper(args);
            m_currentSender = null;
        }
                
    }

    /**
     * Declare and instantiate a field of this class in your QObject subclass to declare a signal that takes  
     * no parameters.
     */
    public final class Signal0 extends AbstractSignal {
        public Signal0() {
            super();
        }

        public void emit() {
            emit_helper();
        }
    }

    /**
     * Declare and instantiate a field of this class in your QObject subclass to declare a signal that takes  
     * one parameter.
     * 
     * @param &lt;A&gt; The type of the single parameter of the signal.
     */
    public final class Signal1&lt;A&gt; extends AbstractSignal {
        public Signal1() {
            super();
        }

        public void emit(A arg1) {
            emit_helper(arg1);
        }

    }

    /**
     * Declare and instantiate a field of this class in your QObject subclass to declare a signal that takes  
     * two parameters.
     * 
     * @param &lt;A&gt; The type of the first parameter of the signal.
     * @param &lt;B&gt; The type of the second parameter of the signal.
     */
    public final class Signal2&lt;A, B&gt; extends AbstractSignal {
        public Signal2() {
            super();
        }

        public void emit(A arg1, B arg2) {
            emit_helper(arg1, arg2);
        }
    }

    /**
     * Declare and instantiate a field of this class in your QObject subclass to declare a signal that takes  
     * three parameters.
     * 
     * @param &lt;A&gt; The type of the first parameter of the signal.
     * @param &lt;B&gt; The type of the second parameter of the signal.
     * @param &lt;C&gt; The type of the third parameter of the signal.
     */
    public final class Signal3&lt;A, B, C&gt; extends AbstractSignal {
        public Signal3() {
            super();
        }

        public void emit(A arg1, B arg2, C arg3) {
            emit_helper(arg1, arg2, arg3);
        }
    }

    /**
     * Declare and instantiate a field of this class in your QObject subclass to declare a signal that takes  
     * four parameters.
     * 
     * @param &lt;A&gt; The type of the first parameter of the signal.
     * @param &lt;B&gt; The type of the second parameter of the signal.
     * @param &lt;C&gt; The type of the third parameter of the signal.
     * @param &lt;D&gt; The type of the fourth parameter of the signal.
     */

    public final class Signal4&lt;A, B, C, D&gt; extends AbstractSignal {
        public Signal4() {
            super();
        }

        public void emit(A arg1, B arg2, C arg3, D arg4) {
            emit_helper(arg1, arg2, arg3, arg4);
        }
    }

    /**
     * Declare and instantiate a field of this class in your QObject subclass to declare a signal that takes  
     * five parameters.
     * 
     * @param &lt;A&gt; The type of the first parameter of the signal.
     * @param &lt;B&gt; The type of the second parameter of the signal.
     * @param &lt;C&gt; The type of the third parameter of the signal.
     * @param &lt;D&gt; The type of the fourth parameter of the signal.
     * @param &lt;E&gt; The type of the fifth parameter of the signal.
     */
    public final class Signal5&lt;A, B, C, D, E&gt; extends AbstractSignal {
        public Signal5() {
            super();
        }

        public void emit(A arg1, B arg2, C arg3, D arg4, E arg5) {
            emit_helper(arg1, arg2, arg3, arg4, arg5);
        }
    }

    /**
     * Declare and instantiate a field of this class in your QObject subclass to declare a signal that takes  
     * six parameters.
     * 
     * @param &lt;A&gt; The type of the first parameter of the signal.
     * @param &lt;B&gt; The type of the second parameter of the signal.
     * @param &lt;C&gt; The type of the third parameter of the signal.
     * @param &lt;D&gt; The type of the fourth parameter of the signal.
     * @param &lt;E&gt; The type of the fifth parameter of the signal.
     * @param &lt;F&gt; The type of the sixth parameter of the signal.
     */
    public final class Signal6&lt;A, B, C, D, E, F&gt; extends AbstractSignal {
        public Signal6() {
            super();
        }

        public void emit(A arg1, B arg2, C arg3, D arg4, E arg5, F arg6) {
            emit_helper(arg1, arg2, arg3, arg4, arg5, arg6);
        }
    }

    /**
     * Declare and instantiate a field of this class in your QObject subclass to declare a signal that takes  
     * seven parameters.
     * 
     * @param &lt;A&gt; The type of the first parameter of the signal.
     * @param &lt;B&gt; The type of the second parameter of the signal.
     * @param &lt;C&gt; The type of the third parameter of the signal.
     * @param &lt;D&gt; The type of the fourth parameter of the signal.
     * @param &lt;E&gt; The type of the fifth parameter of the signal.
     * @param &lt;F&gt; The type of the sixth parameter of the signal.
     * @param &lt;G&gt; The type of the seventh parameter of the signal.
     */
    public final class Signal7&lt;A, B, C, D, E, F, G&gt; extends AbstractSignal {
        public Signal7() {
            super();
        }

        public void emit(A arg1, B arg2, C arg3, D arg4, E arg5, F arg6, G arg7) {
            emit_helper(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
    }

    /**
     * Declare and instantiate a field of this class in your QObject subclass to declare a signal that takes  
     * eight parameters.
     * 
     * @param &lt;A&gt; The type of the first parameter of the signal.
     * @param &lt;B&gt; The type of the second parameter of the signal.
     * @param &lt;C&gt; The type of the third parameter of the signal.
     * @param &lt;D&gt; The type of the fourth parameter of the signal.
     * @param &lt;E&gt; The type of the fifth parameter of the signal.
     * @param &lt;F&gt; The type of the sixth parameter of the signal.
     * @param &lt;G&gt; The type of the seventh parameter of the signal.
     * @param &lt;H&gt; The type of the eighth parameter of the signal.
     */
    public final class Signal8&lt;A, B, C, D, E, F, G, H&gt; extends
            AbstractSignal {
        public Signal8() {
            super();
        }

        public void emit(A arg1, B arg2, C arg3, D arg4, E arg5, F arg6,
                G arg7, H arg8) {
            emit_helper(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
    }

    /**
     * Declare and instantiate a field of this class in your QObject subclass to declare a signal that takes  
     * nine parameters.
     * 
     * @param &lt;A&gt; The type of the first parameter of the signal.
     * @param &lt;B&gt; The type of the second parameter of the signal.
     * @param &lt;C&gt; The type of the third parameter of the signal.
     * @param &lt;D&gt; The type of the fourth parameter of the signal.
     * @param &lt;E&gt; The type of the fifth parameter of the signal.
     * @param &lt;F&gt; The type of the sixth parameter of the signal.
     * @param &lt;G&gt; The type of the seventh parameter of the signal.
     * @param &lt;H&gt; The type of the eighth parameter of the signal.
     * @param &lt;I&gt; The type of the ninth parameter of the signal.
     */
    public final class Signal9&lt;A, B, C, D, E, F, G, H, I&gt; extends
            AbstractSignal {
        public Signal9() {
            super();
        }

        public void emit(A arg1, B arg2, C arg3, D arg4, E arg5, F arg6,
                G arg7, H arg8, I arg9) {
            emit_helper(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }
    }
    
    /** 
     * If a signal is currently being emitted (e.g. if this method is called from within a slot that has been invoked by a signal),
     * then this function will return the object containing the signal that was emitted. 
     * @return Current sender, or null if a signal is not currently being emitted.
     */
    public static QObject signalSender() {
        return m_currentSender;
    }

    /**
     * Internal function to initialize the signals and slots mechanism. It will be called automatically by the connect
     * method.
     */
    protected boolean __qt_signalInitialization(String name) { 
        return false;
    }
       
    public void disconnect() {
        disconnect(null);
    }
    
    public void disconnect(QObject other) {
        com.trolltech.qt.QtJambiInternal.disconnect(this, other);
    }
    
    public java.util.List&lt;QObject> findChildren() { return findChildren(null, (QRegExp) null); }
    public java.util.List&lt;QObject> findChildren(Class&lt;?> cl) { return findChildren(cl, (QRegExp) null); }    
    public java.util.List&lt;QObject> findChildren(Class&lt;?> cl, String name) { 
        return com.trolltech.qt.QtJambiInternal.findChildren(this, cl, name);
    }    
    
    public java.util.List&lt;QObject> findChildren(Class&lt;?> cl, QRegExp name) {
        return com.trolltech.qt.QtJambiInternal.findChildren(this, cl, name);
    }

    public QObject findChild() { return findChild(null, null); }
    public QObject findChild(Class&lt;?> cl) { return findChild(cl, null); }
    public QObject findChild(Class&lt;?> cl, String name) {    
        return com.trolltech.qt.QtJambiInternal.findChild(this, cl, name);
    }
    </inject-code>
  </object-type>

  <object-type name="QCoreApplication" memory-managed="yes">
    <extra-includes>
        <include file-name="QStringList" location="global"/>
    </extra-includes>
    <modify-function class="java" signature="QCoreApplication(int &amp;, char  **)">
      <access modifier="private" />
    </modify-function>     
    
    <modify-function class="java" signature="postEvent(QObject*,QEvent*)">
      <disable-gc argument="2" />  
    </modify-function>    
    <inject-code class="java">
    protected static QCoreApplication m_instance = null;
    public static void initialize(String args[])
    {
        if (m_instance != null)
            throw new RuntimeException("QApplication can only be initialized once");
            
        m_instance = new QCoreApplication(args);
    }
        
    protected final static com.trolltech.qt.QNativePointer argv(String args[])
    {
        String newArgs[] = new String[args.length + 1];
        System.arraycopy(args, 0, newArgs, 1, args.length);
        newArgs[0] = "java app";        
        argv = com.trolltech.qt.QNativePointer.createCharPointerPointer(newArgs);
        return argv;
    }

    protected final static com.trolltech.qt.QNativePointer argc(String args[])
    {
        if (argc != null) {
             throw new RuntimeException("There can only exist one QCoreApplication instance");
        }
        argc = new com.trolltech.qt.QNativePointer(com.trolltech.qt.QNativePointer.Type.Int);
        argc.setIntValue(args.length + 1);
        return argc;
    }

    public QCoreApplication(String args[])         
    {
        this(argc(args), argv(args)); 
    }
    
    @Override
    protected void disposed() {
        argc = null; argv = null; m_instance = null;
        super.disposed();
    }
        
    public static void invokeLater(java.lang.Runnable runnable) {
        postEvent(new QInvokable(runnable), new QEvent(QInvokable.INVOKABLE_EVENT));
    }


    private static com.trolltech.qt.QNativePointer argc, argv;
    </inject-code>
    <modify-function class="shell" signature="notify(QObject *, QEvent *)"> 
        <inject-code class="shell">        
        <argument-map position="2" meta-name="event"/>
	if (event->type() == 512) {
            qtjambi_metacall(0, event);
            return true;
        }
        </inject-code>
    </modify-function>
  </object-type>

  <object-type name="QSettings">
    <extra-includes>
        <include file-name="QStringList" location="global"/>
    </extra-includes>
    <modify-function signature="registerFormat(const QString&amp;,ReadFunc,WriteFunc,Qt::CaseSensitivity)">
        <remove/>
    </modify-function>
  </object-type>

  <object-type name="QEvent"/>

  <object-type name="QDataStream" memory-managed="yes">  
    <modify-function signature="operator&gt;&gt;(char *&amp;)">
        <rename to="operator_shift_right_char_star"/>
    </modify-function>  
    <modify-function signature="operator&gt;&gt;(double&amp;)">
        <rename to="operator_shift_right_double"/>
    </modify-function>
    <modify-function signature="operator&gt;&gt;(uint&amp;)">
        <rename to="operator_shift_right_uint"/>
    </modify-function>    
    <modify-function signature="operator&gt;&gt;(bool&amp;)">
        <rename to="operator_shift_right_bool"/>
    </modify-function>    
    <modify-function signature="operator&gt;&gt;(float&amp;)">
        <rename to="operator_shift_right_float"/>
    </modify-function>    
    <modify-function signature="operator&gt;&gt;(unsigned short&amp;)">
        <rename to="operator_shift_right_unsigned_short"/>
    </modify-function>        
    <modify-function signature="operator&gt;&gt;(unsigned long long&amp;)">
        <rename to="operator_shift_right_unsigned_long_long"/>
    </modify-function>        
    <modify-function signature="operator&gt;&gt;(long long&amp;)">
        <rename to="operator_shift_right_long_long"/>
    </modify-function>            
    <modify-function signature="operator&gt;&gt;(short&amp;)">
        <rename to="operator_shift_right_short"/>
    </modify-function>            
    <modify-function signature="operator&gt;&gt;(int&amp;)">
        <rename to="operator_shift_right_int"/>
    </modify-function>            
    <modify-function signature="operator&gt;&gt;(unsigned int&amp;)">
        <rename to="operator_shift_right_unsigned_int"/>
    </modify-function>                
  </object-type>
  <object-type name="QFSFileEngine">
	<extra-includes>
           <include file-name="QDateTime" location="global" />
        </extra-includes>
  </object-type>

  <object-type name="QTextStream" memory-managed="yes">
    <include file-name="qtextstream.h" location="global"/>        
    <modify-function signature="operator&gt;&gt;(QChar&amp;)">
        <rename to="operator_shift_right_QChar"/>
    </modify-function>
    <modify-function signature="operator&lt;&lt;(const void*)">
        <remove/>
    </modify-function>
    <modify-function signature="operator&gt;&gt;(char&amp;)">
        <rename to="operator_shift_right_char"/>
    </modify-function>    
    <modify-function signature="operator&gt;&gt;(signed short&amp;)">
        <rename to="operator_shift_right_signed_short"/>
    </modify-function>    
    <modify-function signature="operator&gt;&gt;(unsigned short&amp;)">
        <rename to="operator_shift_right_unsigned_short"/>
    </modify-function>    
    <modify-function signature="operator&gt;&gt;(signed int&amp;)">
        <rename to="operator_shift_right_signed_int"/>
    </modify-function>    
    <modify-function signature="operator&gt;&gt;(unsigned int&amp;)">
        <rename to="operator_shift_right_unsigned_int"/>
    </modify-function>    
    <modify-function signature="operator&gt;&gt;(signed long&amp;)">
        <rename to="operator_shift_right_signed_long"/>
    </modify-function>    
    <modify-function signature="operator&gt;&gt;(unsigned long&amp;)">
        <rename to="operator_shift_right_unsigned_long"/>
    </modify-function>    
    <modify-function signature="operator&gt;&gt;(qlonglong&amp;)">
        <rename to="operator_shift_right_qlonglong"/>
    </modify-function>    
    <modify-function signature="operator&gt;&gt;(qulonglong&amp;)">
        <rename to="operator_shift_right_qulonglong"/>
    </modify-function>    
    <modify-function signature="operator&gt;&gt;(unsigned long long&amp;)">
        <rename to="operator_shift_right_unsigned_long_long"/>
    </modify-function>        
    <modify-function signature="operator&gt;&gt;(float&amp;)">
        <rename to="operator_shift_right_QChar"/>
    </modify-function>    
    <modify-function signature="operator&gt;&gt;(double&amp;)">
        <rename to="operator_shift_right_double"/>
    </modify-function>    
    <modify-function signature="operator&gt;&gt;(QString&amp;)">
        <rename to="operator_shift_right_QString"/>
    </modify-function>    
        <modify-function signature="operator&gt;&gt;(QByteArray&amp;)">
        <rename to="operator_shift_right_QByteArray"/>
    </modify-function>
        <modify-function signature="operator&gt;&gt;(char *)">
        <rename to="operator_shift_right_char_star"/>
    </modify-function>    
  </object-type>
  
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'std::*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type '*Private\*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type '*Private&amp;'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QMetaObject'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'FILE\*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QByteArray::Data\*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QTSMFC'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QTSMFI'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QAbstractFileEngine::ExtensionOption const\*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QAbstractFileEngine::Iterator\*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QDataStream::ByteOrder'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: visibility of function '*' modified in class '*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: hiding of function '*' in class '*'" />
  <suppress-warning text="WARNING(CppImplGenerator) :: protected function '*' in final class '*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QPointer&lt;*&gt;'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping * unmatched *type 'QVector&lt;*&gt;'" />

  <suppress-warning text="WARNING(MetaJavaBuilder) :: enum 'QDataStream::ByteOrder' does not have a type entry or is not an enum" />
  
</typesystem>
